{"version":3,"sources":["components/Users/User.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["User","user","followingInProgress","unfollow","follow","className","s","item","to","id","userPhoto","shape","size","icon","photos","small","src","alt","followed","usersButton","disabled","some","onClick","type","userName","name","status","Users","props","users","useSelector","getUsers","totalUsersCount","getTotalUsersCount","currentPage","getCurrentPage","pageSize","getPageSize","filter","getUsersFilter","getFollowingInProgress","useState","actualPage","setActualPage","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substring","actualFilter","page","term","friend","requestUsers","query","String","push","pathname","onPageChanged","pageNumber","console","log","followFunc","userId","unfollowFunc","onShowSizeChange","actions","setPageSize","setCurrentPage","style","width","onChange","showSizeChanger","defaultCurrent","current","total","UsersSearchForm","onFilterChanged","map","u","React","memo","layout","wrapperCol","span","onFinish","values","initialValues","Item","Option","value","htmlType","withAuthRedirect","isFetching","getIsFetching","usersContent","Preloader"],"mappings":"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","file":"static/js/10.b1d75d3a.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\"\r\nimport s from './Users.module.css'\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {UserType} from \"../../types/types\"\r\nimport {Avatar, Button, Col, Divider, Row} from \"antd\"\r\nimport userPhoto from \"./../../assets/img/user.png\"\r\nimport { UserOutlined } from \"@ant-design/icons\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actions} from \"../../redux/profile-reducer\";\r\nimport {getIsFollowed} from \"../../redux/profile-selectors\";\r\nimport {FollowUnfollowBtn} from \"./FollowUnfollowBtn\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number> // array of users ids\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\n\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return <div className={s.item}>\r\n        <Divider />\r\n        <Row>\r\n            <Col>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <Avatar className={s.userPhoto} shape=\"square\" size={100} icon={user.photos.small\r\n                        ? <img src={user.photos.small} alt=\"avatar\"/> : <img src={userPhoto} alt=\"avatar\"/>} />\r\n                </NavLink>\r\n                <div>\r\n                    {user.followed\r\n                        ? <Button className={s.usersButton} disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unfollow(user.id)\r\n                                  }}>Unfollow</Button>\r\n                        : <Button className={s.usersButton} type=\"primary\" disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id)\r\n                                  }}>Follow</Button>}\r\n                </div>\r\n            </Col>\r\n            <Col>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <h3 className={s.userName}>{user.name}</h3>\r\n                    <h4>{user.status}</h4>\r\n                </NavLink>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default User","import React, {useEffect, useState} from \"react\"\r\nimport User from \"./User\"\r\nimport {actions, FilterType, follow, requestUsers, unfollow} from \"../../redux/users-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport * as queryString from \"querystring\"\r\nimport {Button, Form, Input, Pagination, Select} from 'antd'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string }\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const [actualPage, setActualPage] = useState(currentPage)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substring(1)) as QueryParamsType\r\n\r\n        let actualFilter = filter\r\n\r\n        if(!!parsed.page) setActualPage(+parsed.page)\r\n\r\n        if (parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [pageSize])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (actualPage !== 1) query.page = String(actualPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, actualPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        console.log('Page: ', pageNumber)\r\n        setActualPage(pageNumber)\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followFunc = (userId: number) => {\r\n        dispatch(follow(userId, filter.friend))\r\n    }\r\n    const unfollowFunc = (userId: number) => {\r\n        dispatch(unfollow(userId, filter.friend))\r\n    }\r\n    const onShowSizeChange = (currentPage: number = 1, pageSize: number) => {\r\n        console.log(currentPage, pageSize)\r\n        dispatch(actions.setPageSize(pageSize))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(requestUsers(currentPage, pageSize, filter))\r\n    }\r\n\r\n    return (\r\n        <div style={{width: 700}}>\r\n            <>\r\n                <Pagination\r\n                    onChange={onPageChanged}\r\n                    showSizeChanger\r\n                    onShowSizeChange={onShowSizeChange}\r\n                    defaultCurrent={currentPage}\r\n                    current={currentPage}\r\n                    total={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                />\r\n                <br />\r\n            </>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <div>\r\n                {users.map(u => <User key={u.id} user={u} followingInProgress={followingInProgress}\r\n                                      unfollow={unfollowFunc} follow={followFunc}/>\r\n                )}\r\n            </div>\r\n            <>\r\n                <Pagination\r\n                    onChange={onPageChanged}\r\n                    showSizeChanger\r\n                    onShowSizeChange={onShowSizeChange}\r\n                    defaultCurrent={currentPage}\r\n                    current={currentPage}\r\n                    total={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                />\r\n                <br />\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\"\r\ntype UsersSearchFormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n    const onFinish = (values: UsersSearchFormType) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        console.log('Received values of form: ', values)\r\n    }\r\n\r\n    return <Form\r\n        layout=\"inline\"\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        style={{width: '100%'}}\r\n        initialValues={{ term: \"\", friend: \"null\" }}\r\n    >\r\n        <Form.Item name=\"term\">\r\n            <Input />\r\n        </Form.Item>\r\n        <Form.Item name=\"friend\">\r\n            <Select style={{width: 130}}>\r\n                <Select.Option value=\"null\">All</Select.Option>\r\n                <Select.Option value=\"true\">Only followed</Select.Option>\r\n                <Select.Option value=\"false\">Only unfollowed</Select.Option>\r\n            </Select>\r\n        </Form.Item>\r\n        <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Find\r\n            </Button>\r\n        </Form.Item>\r\n    </Form>\r\n})","import React from \"react\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {Users} from \"./Users\"\r\nimport Preloader from \"../common/Preloader/Preloader\"\r\nimport {getIsFetching} from \"../../redux/users-selectors\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\r\nimport s from './Users.module.css'\r\n\r\nconst UsersPage: React.FC = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <div className={s.usersContent}>\r\n        <h2>Developers</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users/>\r\n    </div>\r\n}\r\n\r\nexport default withAuthRedirect(UsersPage)\r\n\r\n"],"sourceRoot":""}