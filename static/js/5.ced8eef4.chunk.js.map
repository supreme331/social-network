{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","activeId","s","dialogsItems","active","onClick","setActiveDialog","style","width","src","userPhoto","alt","to","name","Message","message","Messages","dialog","state","find","d","messagesElements","messages","map","m","AddMessageForm2","Form","useForm","form","size","wrapperCol","span","onFinish","values","sendMessage","newMessageText","onAddPost","resetFields","console","log","initialValues","Item","TextArea","allowClear","autoSize","minRows","maxRows","showCount","maxLength","placeholder","type","htmlType","Dialogs","useState","setIsActive","setActiveId","dialogsPage","dialogs","dialogElements","messageForm","compose","connect","actions","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,YAAc,6BAA6B,MAAQ,yB,oHCqBhRC,EAVyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,sBAAKC,UAAWH,EAAMI,WAAaJ,EAAME,GAAKG,IAAEC,aAAe,IAAMD,IAAEE,OAASF,IAAEC,aAAcE,QAAS,kBAAMR,EAAMS,gBAAgBT,EAAME,KAA3I,UACI,qBAAKQ,MAAO,CAACC,MAAO,IAAKC,IAAKC,IAAWC,IAAI,WAC7C,cAAC,IAAD,CAASC,GAAId,EAAb,SAAoBD,EAAMgB,WCPvBC,EAHqB,SAACjB,GACnC,OAAO,qBAAKG,UAAWE,IAAEa,QAAlB,SAA4BlB,EAAMkB,W,2BC4CrCC,EAAwC,SAACnB,GAC3C,IAAIoB,EAASpB,EAAMqB,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAErB,KAAOF,EAAME,MAClD,GAAIkB,EAAQ,CACR,IAAII,EAAmBJ,EAAOK,SACzBC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAST,QAASS,EAAET,SAAcS,EAAEzB,OAClD,OACI,8BACI,8BACKsB,MAKb,IAAIA,EAAmB,wDACvB,OACI,8BACSA,KAoCfI,EAAqD,SAAC5B,GACxD,MAAe6B,IAAKC,UAAbC,EAAP,oBAUA,OAAO,eAAC,IAAD,CACHA,KAAMA,EACNC,KAAM,SACNC,WAAY,CAAEC,KAAM,IACpBC,SATa,SAACC,IAJA,SAACA,GACfpC,EAAMqC,YAAYrC,EAAME,GAAIkC,EAAOE,gBAInCC,CAAUH,GACVL,EAAKS,cACLC,QAAQC,IAAI,4BAA6B,CAACN,YAO1C1B,MAAO,CAACC,MAAO,QACfgC,cAAe,CACXL,eAAgB,IAPjB,UAUH,cAAC,IAAKM,KAAN,CAAW5B,KAAK,iBAAhB,SACI,cAAC,IAAM6B,SAAP,CAAgBC,YAAY,EAAMC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GAAKC,WAAS,EAACC,UAAW,IAAKC,YAAY,yBAElH,cAAC,IAAKR,KAAN,UACI,cAAC,IAAD,CAAQS,KAAK,UAAUC,SAAS,SAAhC,wBAOGC,EAvH6B,SAACvD,GAEzC,MAAgCwD,oBAAS,GAAzC,mBAAiBC,GAAjB,WACA,EAAgCD,mBAAS,GAAzC,mBAAOpD,EAAP,KAAiBsD,EAAjB,KAEMjD,EAAkB,SAACP,GACrBuD,GAAY,GACZC,EAAYxD,IAGZmB,EAAQrB,EAAM2D,YAAYC,QAC1BC,EAAiBxC,EAChBK,KAAI,SAAAH,GAAC,OAAI,cAAC,EAAD,CAAYP,KAAMO,EAAEP,KAAiBd,GAAIqB,EAAErB,GAAIE,SAAUA,EAAUK,gBAAiBA,GAArDc,EAAErB,OAC/C,OACI,sBAAKC,UAAWE,IAAEuD,QAAlB,UACI,8BACKC,IAEL,gCACI,qBAAK1D,UAAWE,IAAEoB,SAAlB,SACI,cAAC,EAAD,CAAUvB,GAAIE,EAAUiB,MAAOA,MAEnC,qBAAKlB,UAAWE,IAAEyD,YAAlB,SACI,cAAC,EAAD,CAAiB5D,GAAIE,EAAUiC,YAAarC,EAAMqC,uB,yBC1BvD0B,sBACXC,aAPkB,SAAC3C,GACnB,MAAO,CACHsC,YAAatC,EAAMsC,eAKhB,eAAsBM,MAC7BC,IAFWH,CAGbR","file":"static/js/5.ced8eef4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3zSVP\",\"dialogsItems\":\"Dialogs_dialogsItems__3C30Y\",\"active\":\"Dialogs_active__ntkN3\",\"dialog\":\"Dialogs_dialog__1i7Q_\",\"messages\":\"Dialogs_messages__19Zcw\",\"message\":\"Dialogs_message__3Zu5_\",\"messageForm\":\"Dialogs_messageForm__2kwPM\",\"error\":\"Dialogs_error__5iYSb\"};","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../../assets/img/user.png\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n    activeId: number\r\n    setActiveDialog: (id: number) => void\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={props.activeId === props.id ? s.dialogsItems + ' ' + s.active : s.dialogsItems} onClick={() => props.setActiveDialog(props.id)}>\r\n            <img style={{width: 30}} src={userPhoto} alt=\"avatar\"/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message:React.FC<PropsType> = (props) => {\r\n  return <div className={s.message}>{props.message}</div>\r\n}\r\nexport default Message;","import React, {useState} from \"react\"\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\"\r\nimport {DialogType} from \"../../types/types\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport Message from \"./Message/Message\";\r\nimport {Button, Form, Input} from \"antd\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (dialogId: number, newMessageText: string) => void\r\n    state: Array<DialogType>\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    const [isActive, setIsActive] = useState(false)\r\n    const [activeId, setActiveId] = useState(1)\r\n\r\n    const setActiveDialog = (id: number) => {\r\n        setIsActive(true)\r\n        setActiveId(id)\r\n    }\r\n\r\n    let state = props.dialogsPage.dialogs\r\n    let dialogElements = state\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id} activeId={activeId} setActiveDialog={setActiveDialog}/>)\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div>\r\n                {dialogElements}\r\n            </div>\r\n            <div>\r\n                <div className={s.messages}>\r\n                    <Messages id={activeId} state={state} />\r\n                </div>\r\n                <div className={s.messageForm}>\r\n                    <AddMessageForm2 id={activeId} sendMessage={props.sendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MessagesPropsType = {\r\n    state: Array<DialogType>\r\n    id: number\r\n}\r\n\r\nconst Messages: React.FC<MessagesPropsType> = (props) => {\r\n    let dialog = props.state.find(d => d.id === props.id)\r\n    if (dialog) {\r\n        let messagesElements = dialog.messages\r\n            .map(m => <Message message={m.message} key={m.id}/>)\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        let messagesElements = <div>Messages is not found</div>\r\n        return (\r\n            <div>\r\n                    {messagesElements}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// const schema = yup.object().shape({\r\n//     newMessageText: yup.string().max(100)\r\n// })\r\n\r\ntype AddMessageFormPropsType = {\r\n    sendMessage: (dialogId: number, newMessageText: string) => void\r\n    id: number\r\n}\r\n\r\n// const AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\r\n//\r\n//     const {register, handleSubmit, formState: {errors}, reset} = useForm(\r\n//         {mode: \"onChange\", resolver: yupResolver(schema)})\r\n//\r\n//     const onSubmit = (data: { newMessageText: string }) => {\r\n//         props.sendMessage(props.id, data.newMessageText)\r\n//         reset()\r\n//     }\r\n//\r\n//     return <form onSubmit={handleSubmit(onSubmit)}>\r\n//         <div>\r\n//             <textarea placeholder='Enter your message' cols={30} rows={10} {...register(\"newMessageText\")} />\r\n//             <p className={s.error}>{errors.newMessageText?.message}</p>\r\n//         </div>\r\n//         <div>\r\n//             <input type=\"submit\"/>\r\n//         </div>\r\n//     </form>\r\n// }\r\n\r\nconst AddMessageForm2: React.FC<AddMessageFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const onAddPost = (values: { newMessageText: string }) => {\r\n        props.sendMessage(props.id, values.newMessageText)\r\n    }\r\n\r\n    const onFinish = (values: { newMessageText: string }) => {\r\n        onAddPost(values)\r\n        form.resetFields()\r\n        console.log('Received values of form: ', {values})\r\n    }\r\n    return <Form\r\n        form={form}\r\n        size={'middle'}\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        style={{width: '100%'}}\r\n        initialValues={{\r\n            newMessageText: ''\r\n        }}\r\n    >\r\n        <Form.Item name='newMessageText' >\r\n            <Input.TextArea allowClear={true} autoSize={{ minRows: 3, maxRows: 6 }} showCount maxLength={300} placeholder='Enter your message'/>\r\n        </Form.Item>\r\n        <Form.Item >\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Send\r\n            </Button>\r\n        </Form.Item>\r\n    </Form>\r\n}\r\n\r\nexport default Dialogs","import React from \"react\"\r\nimport {actions} from \"../../redux/dialogs-reducer\"\r\nimport Dialogs from \"./Dialogs\"\r\nimport {connect} from \"react-redux\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\r\nimport {compose} from \"redux\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}