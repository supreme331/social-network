{"version":3,"sources":["assets/img/user.png","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","hoc/withAuthRedirect.tsx","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","reportWebVitals.js","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","redux/profile-selectors.ts","components/Users/FollowUnfollowBtn.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Users/FollowedUsersBar.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","assets/img/logo.png","components/Header/Header.tsx","App.tsx","index.tsx","api/api.ts","api/profileAPI.ts","redux/profile-reducer.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","utils/object-helpers.ts","redux/users-reducer.ts","assets/img/Spin.svg","components/common/Preloader/Preloader.tsx","api/usersAPI.ts","components/Users/Users.module.css","redux/users-selectors.ts","components/Profile/MyPosts/Post/Post.module.css","api/authAPI.ts","api/securityAPI.ts","redux/auth-reducer.ts","components/Navbar/Navbar.module.css","redux/auth-selectors.ts"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","initialState","dialogs","id","name","messages","message","actions","sendMessage","dialogId","newMessageText","type","dialogsReducer","action","newMessage","dialog","find","d","dialogIndex","findIndex","changedDialog","dialogsCopy","slice","splice","subscribers","ws","closeHandler","console","log","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatApi","eventName","callback","push","filter","send","payload","_statusChangedHandler","statusChangedHandlerCreator","dispatch","_newMessageHandler","newMessageHandlerCreator","startMessagesListening","a","stopMessagesListening","chatReducer","map","m","v1","index","array","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SubMenu","Menu","Sider","Layout","Navbar","useDispatch","pageSize","useSelector","getPageSize","width","style","padding","overflow","height","position","zIndex","theme","mode","defaultSelectedKeys","defaultOpenKeys","Item","className","item","icon","UserOutlined","MessageOutlined","LaptopOutlined","title","onClick","requestUsers","term","friend","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","deactivateEditMode","updateUserStatus","isOwner","ownerStatusBody","onChange","currentTarget","value","onPressEnter","onBlur","placeholder","autoFocus","ProfileDataForm2","Typography","Text","profile","deActivateEditMode","saveProfile","size","wrapperCol","span","onFinish","values","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","facebook","website","vk","twitter","instagram","youtube","github","mainLink","contacts","initialValues","profileFormInput","label","noStyle","valuePropName","TextArea","Object","keys","key","contact","htmlType","getProfileSelector","profilePage","getIsFetchingProfile","isFetchingProfile","getIsFetchingFollowed","isFetchingFollowed","getIsFollowed","isFollowed","FollowUnfollowBtn","actualIsFollowed","userId","followingInProgress","unfollow","follow","setActualIsFollowed","profileButton","disabled","some","Link","Contact","contactTitle","contactValue","href","target","ProfileData","activateEditMode","orientation","deviderText","direction","maxWidth","wrap","split","ProfileInfo","savePhoto","getFollowingInProgress","Preloader","infoBlock","mainPhoto","src","photos","large","userPhoto","alt","loadPhotoActive","file","files","descriptionBlock","ProfileDataForm","Post","flex","messageText","isLiked","shape","LikeFilled","likeUnlikeIcon","setUnLiked","likesCount","LikeOutlined","setLiked","CloseOutlined","removeIcon","deletePost","MyPostsForm","Form","useForm","form","addPost","newPostText","onAddPost","resetFields","allowClear","autoSize","minRows","maxRows","showCount","maxLength","MyPosts","onSetLiked","onSetUnLiked","onDeletePost","postsElements","posts","reverse","p","postBlock","MyPostsContainer","addPostAC","deletePostAC","FollowedUsersBar","users","getUsers","totalUsersCount","getTotalUsersCount","setActualTotalUsersCount","followedBar","moreBtn","justify","u","userItem","small","userName","Profile","ProfileContainer","this","match","params","authorizedUserId","history","fetchingProfile","fetchingFollowed","getProfile","getIsUserFollowed","getUserStatus","refreshProfile","prevProps","prevState","React","Component","compose","getIsAuth","withRouter","initialized","appReducer","rootReducer","combineReducers","profileReducer","dialogsPage","usersPage","usersReducer","authReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Suspense","fallback","Header","login","getCurrentUserLogin","margin","logo","siteLogo","loginBtn","logout","Content","Footer","News","lazy","Settings","DialogsContainer","UsersPage","LoginPage","ChatPage","SuspendedDialogs","SuspendedUsers","SuspendedLoginPage","SuspendedChatPage","App","catchAllUnhandledErrors","initializeApp","exact","path","render","textAlign","AppContainer","getAuthUserData","SamuraiJSApp","ReactDOM","document","getElementById","ResultCodesEnum","ResultCodesForCaptcha","instance","axios","create","withCredentials","baseURL","headers","profileAPI","get","res","put","photoFile","formData","FormData","append","postId","setUserProfile","setUserStatus","savePhotoSuccess","toggleIsFetchingProfile","toggleIsFetchingFollowed","setIsFollowed","resultCode","getState","Error","usersAPI","newPost","changingPost","changingPostIndex","changedPost","postsCopy","updateObjectInArray","items","itemId","objPropName","newObjProps","currentPage","isFetching","page","toggleIsFetching","setCurrentPage","setFilter","setUsers","setTotalUsersCount","totalCount","_followUnfollowFlow","apiMethod","actionCreator","toggleFollowingProgress","profileActions","bind","followSuccess","unfollowSuccess","count","setPageSize","followed","backgroundColor","preloader","post","delete","createSelector","getCurrentPage","getIsFetching","getUsersFilter","authAPI","email","password","rememberMe","captcha","securityAPI","isWrongAuth","authErrorMessage","captchaUrl","currentUserProfile","meData","Success","loginData","CaptchaIsRequired","getCaptchaUrl","url","getIsWrongAuth","getAuthErrorMessage","getCaptchaUrlSelector"],"mappings":"wHAAe,QAA0B,kC,oBCCzCA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,MAAQ,yB,oBCAhGD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,KAAO,qBAAqB,WAAa,6B,iICI3HC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAQhB,SAASE,EAAuBC,GAWnC,OAJqCC,YACjCN,EAA4B,GADKM,EAN+D,SAACC,GACjG,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,GACA,OAAKL,EACE,cAACG,EAAD,eAAsBG,IADT,cAAC,IAAD,CAAUC,GAAI,e,qFCdtCC,EAAe,CACfC,QAAS,CACL,CAACC,GAAI,EAAGC,KAAM,UACVC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,cACjB,CAACH,GAAI,EAAGG,QAAS,SACjB,CAACH,GAAI,EAAGG,QAAS,WAEzB,CAACH,GAAI,EAAGC,KAAM,WACVC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,eACjB,CAACH,GAAI,EAAGG,QAAS,UACjB,CAACH,GAAI,EAAGG,QAAS,YAEzB,CAACH,GAAI,EAAGC,KAAM,UACVC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,cACjB,CAACH,GAAI,EAAGG,QAAS,SACjB,CAACH,GAAI,EAAGG,QAAS,WAEzB,CAACH,GAAI,EAAGC,KAAM,UACVC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,cACjB,CAACH,GAAI,EAAGG,QAAS,SACjB,CAACH,GAAI,EAAGG,QAAS,WAEzB,CAACH,GAAI,EAAGC,KAAM,WACVC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,eACjB,CAACH,GAAI,EAAGG,QAAS,UACjB,CAACH,GAAI,EAAGG,QAAS,cA+BpBC,EAAU,CACnBC,YAAa,SAACC,EAAkBC,GAAnB,MAA+C,CAACC,KAAM,0BAA2BF,WAAUC,oBAG7FE,IA7BQ,WAAmE,IAAlEpB,EAAiE,uDAAzDS,EAAcY,EAA2C,uCACrF,GACS,4BADDA,EAAOF,KACX,CACI,IAAIG,EAAa,CACbX,GAAI,EACJG,QAASO,EAAOH,gBAEhBK,EAASvB,EAAMU,QAAQc,MAAK,SAAAC,GAAC,OAAIA,EAAEd,KAAOU,EAAOJ,YACjDS,EAAc1B,EAAMU,QAAQiB,WAAU,SAAAF,GAAC,OAAIA,EAAEd,KAAOU,EAAOJ,YAC/D,GAAIM,EAAQ,CACR,IAAIK,EAAa,2BAAOL,GAAP,IAAeV,SAAS,GAAD,mBAAMU,EAAOV,UAAb,CAAuBS,MAC3DO,EAAc7B,EAAMU,QAAQoB,QAEhC,OADAD,EAAYE,OAAOL,EAAY,EAAGE,GAC3B,2BACA5B,GADP,IAEIU,QAASmB,IAGb,OAAO7B,EAGX,OAAOA,I,kLC5DbgC,EAAc,CAChB,oBAAqB,GACrB,iBAAkB,IAGlBC,EAAuB,KACrBC,EAAe,WACjBC,QAAQC,IAAI,YACZC,EAA6B,WAC7BC,WAAWC,EAAe,MAExBC,EAAiB,SAACC,GACpB,IAAMC,EAAcC,KAAKC,MAAMH,EAAEI,MACjCb,EAAY,qBAAqBc,SAAQ,SAAAC,GAAC,OAAIA,EAAEL,OAE9CM,EAAc,WAChBX,EAA6B,UAE3BY,EAAe,WACjBZ,EAA6B,SAC7BF,QAAQC,IAAI,iBAEVc,EAAU,WAAO,IAAD,QAChB,QAAF,EAAAjB,SAAA,SAAIkB,oBAAoB,QAASjB,GAC/B,QAAF,EAAAD,SAAA,SAAIkB,oBAAoB,UAAWX,GACjC,QAAF,EAAAP,SAAA,SAAIkB,oBAAoB,OAAQH,GAC9B,QAAF,EAAAf,SAAA,SAAIkB,oBAAoB,QAASF,IAE/BZ,EAA+B,SAACe,GAClCpB,EAAY,kBAAkBc,SAAQ,SAAAC,GAAC,OAAIA,EAAEK,OAEjD,SAASb,IAAiB,IAAD,EACrBW,IACE,QAAF,EAAAjB,SAAA,SAAIoB,QACJpB,EAAK,IAAIqB,UAAU,gEACnBjB,EAA6B,WAC7BJ,EAAGsB,iBAAiB,QAASrB,GAC7BD,EAAGsB,iBAAiB,UAAWf,GAC/BP,EAAGsB,iBAAiB,OAAQP,GAC5Bf,EAAGsB,iBAAiB,QAASN,GAG1B,IAAMO,EAAU,WAEfjB,KAFKiB,EAAU,WAIX,IAAD,EACHxB,EAAY,qBAAuB,GACnCA,EAAY,kBAAoB,GAChCkB,IACE,QAAF,EAAAjB,SAAA,SAAIoB,SARCG,EAAU,SAUTC,EAA2BC,GAGjC,OADA1B,EAAYyB,GAAWE,KAAKD,GACrB,WAEH1B,EAAYyB,GAAazB,EAAYyB,GAAWG,QAAO,SAAAb,GAAC,OAAIA,IAAMW,OAfjEF,EAAU,SAkBPC,EAA2BC,GAEnC1B,EAAYyB,GAAazB,EAAYyB,GAAWG,QAAO,SAAAb,GAAC,OAAIA,IAAMW,MApB7DF,EAAU,SAsBP1C,GAAkB,IAAD,EACvB,QAAF,EAAAmB,SAAA,SAAI4B,KAAK/C,I,SC5DbL,EAAe,CACfI,SAAU,GACVuC,OAAQ,WAqBNrC,EACgB,SAACF,GAAD,MACd,CAACM,KAAM,4BAA6B2C,QAAS,CAACjD,cAFhDE,EAGa,SAACqC,GAAD,MACX,CAACjC,KAAM,yBAA0B2C,QAAS,CAACV,YAG/CW,EAA+D,KAC7DC,EAA8B,SAACC,GAMjC,OAL8B,OAA1BF,IACAA,EAAwB,SAACX,GACrBa,EAASlD,EAAsBqC,MAGhCW,GAEPG,EAAwE,KACtEC,EAA2B,SAACF,GAM9B,OAL2B,OAAvBC,IACAA,EAAqB,SAACrD,GAClBoD,EAASlD,EAAyBF,MAGnCqD,GAGEE,EAAyB,yDAAiB,WAAOH,GAAP,SAAAI,EAAA,sDACnDb,IACAA,EAAkB,oBAAqBW,EAAyBF,IAChET,EAAkB,iBAAkBQ,EAA4BC,IAHb,2CAAjB,uDAKzBK,EAAwB,yDAAiB,WAAOL,GAAP,SAAAI,EAAA,sDAClDb,EAAoB,oBAAqBW,EAAyBF,IAClET,EAAoB,iBAAkBQ,EAA4BC,IAClET,IAHkD,2CAAjB,uDAKxBxC,EAAc,SAACF,GAAD,8CAAgC,WAAOmD,GAAP,SAAAI,EAAA,sDACvDb,EAAoB1C,GADmC,2CAAhC,uDAIZyD,IA1DK,WAAmE,IAAlEvE,EAAiE,uDAAzDS,EAAcY,EAA2C,uCAClF,OAAQA,EAAOF,MACX,IAAK,4BACD,OAAO,2BACAnB,GADP,IAEIa,SAAU,sBAAIb,EAAMa,UAAV,YAAuBQ,EAAOyC,QAAQjD,SAAS2D,KAAI,SAAAC,GAAC,kCAASA,GAAT,IAAY9D,GAAI+D,qBACzEd,QAAO,SAACa,EAAGE,EAAOC,GAAX,OAAqBD,GAASC,EAAMC,OAAS,SAEjE,IAAK,yBACD,OAAO,2BACA7E,GADP,IAEIoD,OAAQ/B,EAAOyC,QAAQV,SAE/B,QACI,OAAOpD,K,oFCxBnB,IAYe8E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gMCENQ,EAAYC,IAAZD,QACAE,EAAUC,IAAVD,MAwDOE,EAtDU,WAIrB,IAAM1B,EAAW2B,cACXC,EAAWC,YAAYC,KAQ7B,OAAO,cAACN,EAAD,CAAOO,MAAO,IAAKC,MAAQ,CAC9BC,QAAS,SACTC,SAAU,OACVC,OAAQ,QACRC,SAAU,QACVC,OAAQ,GALL,SAOH,eAAC,IAAD,CACIC,MAAM,QACNC,KAAK,SACLC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAJtB,UAMQ,cAAC,IAAKC,KAAN,CAAWC,UAAW7D,IAAE8D,KAAcC,KAAM,cAACC,EAAA,EAAD,IAA5C,SAA8D,cAAC,IAAD,CAAMvG,GAAG,WAAT,sBAA5B,KAClC,cAAC,IAAKmG,KAAN,CAAWC,UAAW7D,IAAE8D,KAAcC,KAAM,cAACE,EAAA,EAAD,IAA5C,SAAiE,cAAC,IAAD,CAAMxG,GAAG,WAAT,uBAA/B,KACtC,eAAC+E,EAAD,CAASqB,UAAW7D,IAAE8D,KAAiBC,KAAM,cAACG,EAAA,EAAD,IAAoBC,MAAM,aAAvE,UACI,cAAC,IAAKP,KAAN,CAAWC,UAAW7D,IAAE8D,KAAxB,SAAsC,cAAC,IAAD,CAAMM,QApBhC,WACpBlD,EAASmD,YAAa,EAAGvB,EAAU,CAACwB,KAAM,GAAIC,OAAQ,SAmBwB9G,GAAG,cAAnC,6BAAJ,KAClC,cAAC,IAAKmG,KAAN,CAAWC,UAAW7D,IAAE8D,KAAxB,SAAsC,cAAC,IAAD,CAAMM,QAxBlC,WAClBlD,EAASmD,YAAa,EAAGvB,EAAU,CAACwB,KAAM,GAAIC,QAAQ,MAuBsB9G,GAAG,cAAjC,4BAAJ,OAFN,c,yDCgB7B+G,EA7CqC,SAACjH,GAEjD,MAA8BkH,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAASlH,EAAM8C,QAAzC,mBAAKA,EAAL,KAAauE,EAAb,KAEAC,qBAAU,WACND,EAAUrH,EAAM8C,UACjB,CAAC9C,EAAM8C,SAEV,IAGMyE,EAAqB,WACvBH,GAAY,GACZpH,EAAMwH,iBAAiB1E,IAMvB,OACI,gCAAM9C,EAAMyH,UACXN,GACG,qBAAKb,UAAW7D,IAAEiF,gBAAiBb,QAdtB,WACrBO,GAAY,IAaJ,SAA8D,+BAAOpH,EAAM8C,QAAU,iBACxFqE,GACG,8BAGA,cAAC,IAAD,CAAOQ,SAXI,SAACxF,GACpBkF,EAAUlF,EAAEyF,cAAcC,QAWlBC,aAAcP,EACdQ,OAAQR,EACRM,MAAO/E,EACPkF,YAAY,cACZC,WAAW,OAINjI,EAAMyH,SAAW,8BAAK,+BAAOzH,EAAM8C,QAAU,qB,6CC4JnDoF,GAlMAC,IAARC,KA0FsD,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,mBAAoBC,EAAiB,EAAjBA,YAuCxF,OAAO,eAAC,IAAD,CACHC,KAAM,QACNC,WAAY,CAAEC,KAAM,IACpBC,SAba,SAACC,GACd,MAA6IA,EAAtIC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,eAAgBC,EAA1C,EAA0CA,0BAA2BC,EAArE,EAAqEA,SAAUC,EAA/E,EAA+EA,QAASC,EAAxF,EAAwFA,GAAIC,EAA5F,EAA4FA,QAASC,EAArG,EAAqGA,UAAWC,EAAhH,EAAgHA,QAASC,EAAzH,EAAyHA,OAAQC,EAAjI,EAAiIA,SAGjIjB,EAFAK,EAAS,CAACC,WAAUC,UAASC,iBAAgBC,4BAA2BS,SAAU,CAACR,WAAUC,UAASC,KAAIC,UAASC,YAAWC,UAASC,SAAQC,cAG/IlB,IAEAzG,QAAQC,IAAI,4BAA6B,CAAC+G,WAAUC,UAASC,iBAAgBC,4BAA2BS,SAAU,CAACR,WAAUC,UAASC,KAAIC,UAASC,YAAWC,UAASC,SAAQC,eAO/K7D,MAAO,CAACD,MAAO,QACfgE,cAAe,CACXb,SAAUR,EAAQQ,SAClBC,QAAST,EAAQS,QACjBC,eAAeV,EAAQU,eACvBC,0BAA2BX,EAAQW,0BAE/BC,SAAUZ,EAAQoB,SAASR,SAC3BC,QAASb,EAAQoB,SAASP,QAC1BC,GAAId,EAAQoB,SAASN,GACrBC,QAASf,EAAQoB,SAASL,QAC1BC,UAAWhB,EAAQoB,SAASJ,UAC5BC,QAASjB,EAAQoB,SAASH,QAC1BC,OAAQlB,EAAQoB,SAASF,OACzBC,SAAUnB,EAAQoB,SAASD,UAlBhC,UAsBH,cAAC,IAAD,IACA,cAAC,IAAKnD,KAAN,CAAWC,UAAW7D,IAAEkH,iBAAkBC,MAAM,aAAhD,SACI,cAAC,IAAKvD,KAAN,CAAW/F,KAAK,WAAWuJ,SAAO,EAAlC,SACA,cAAC,IAAD,QAGJ,cAAC,IAAKxD,KAAN,CAAWC,UAAW7D,IAAEkH,iBAAkBC,MAAM,YAAhD,SACI,cAAC,IAAKvD,KAAN,CAAW/F,KAAK,UAAUuJ,SAAO,EAAjC,SACI,cAAC,IAAD,QAGR,cAAC,IAAKxD,KAAN,CAAWC,UAAW7D,IAAEkH,iBAAkBC,MAAM,sBAAsBtJ,KAAK,iBAAiBwJ,cAAc,UAAUrB,WAAY,CAAEC,KAAM,IAAxI,SACI,cAAC,IAAD,MAEJ,2DACA,cAAC,IAAKrC,KAAN,CAAWC,UAAW7D,IAAEkH,iBAAkBrJ,KAAK,4BAA/C,SACI,cAAC,IAAMyJ,SAAP,CAAgB/B,YAAY,wBAEhC,6CAAgBgC,OAAOC,KAAK5B,EAAQoB,UAAUvF,KAAI,SAAAgG,GAK1C,OAAO,qBAAe5D,UAAW7D,IAAE0H,QAA5B,SACH,cAAC,IAAK9D,KAAN,CAAWC,UAAW7D,IAAEkH,iBAAkBC,MAAOM,EAAM,KAAvD,SACI,cAAC,IAAK7D,KAAN,CAAW/F,KAAM4J,EAAKL,SAAO,EAA7B,SACI,cAAC,IAAD,SAHKK,SASzB,cAAC,IAAK7D,KAAN,UACI,cAAC,IAAD,CAAQxF,KAAK,UAAUuJ,SAAS,SAAhC,yB,kBChMEC,EAAqB,SAAC3K,GAChC,OAAOA,EAAM4K,YAAYjC,SAIfkC,EAAuB,SAAC7K,GAClC,OAAOA,EAAM4K,YAAYE,mBAEfC,EAAwB,SAAC/K,GACnC,OAAOA,EAAM4K,YAAYI,oBAGfC,EAAgB,SAACjL,GAC3B,OAAOA,EAAM4K,YAAYM,Y,iBCEhBC,EAAsD,SAAC,GAA4F,IAA3FC,EAA0F,EAA1FA,iBAAkBC,EAAwE,EAAxEA,OAAQC,EAAgE,EAAhEA,oBAAqBC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,OAAiC,EAAzBC,oBAGlI,OAAO,8BACFL,EACK,cAAC,IAAD,CAAQxE,UAAW7D,IAAE2I,cAAeC,SAAUL,EAAoBM,MAAK,SAAAjL,GAAE,OAAIA,IAAO0K,KAC5ElE,QAAS,WACLoE,EAASF,IAFrB,sBAKA,cAAC,IAAD,CAAQzE,UAAW7D,IAAE2I,cAAevK,KAAK,UAAUwK,SAAUL,EAAoBM,MAAK,SAAAjL,GAAE,OAAIA,IAAO0K,KAC3FlE,QAAS,WACLqE,EAAOH,IAFnB,uBCXN3C,EAAeD,IAAfC,KAAMmD,EAASpD,IAAToD,KA2FRC,EAAuC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACzD,OAAO,cAACH,EAAD,CAAMjF,UAAW7D,IAAE0H,QAASwB,KAAMD,EAAcE,OAAO,SAAvD,SACFH,KAUHI,GAA8C,SAAC,GAA0C,IAAzCxD,EAAwC,EAAxCA,QAASZ,EAA+B,EAA/BA,QAASqE,EAAsB,EAAtBA,iBAGpE,OAAO,gCACFrE,EAAU,8BACP,cAAC,IAAD,CAASsE,YAAY,QAArB,SAA6B,cAAC,EAAD,CAAMzF,UAAW7D,IAAEuJ,YAAanF,QAASiF,EAAzC,8BAE/B,cAAC,IAAD,IAEF,eAAC,IAAD,CAAOG,UAAU,WAAjB,UACA,eAAC,EAAD,WAAM,0CAAN,IAAwB5D,EAAQS,WAChC,eAAC,EAAD,WAAM,mDAAN,IAAiCT,EAAQU,eAAiB,MAAQ,QACjEV,EAAQU,gBACT,eAAC,EAAD,WAAM,wDAAN,IAAsCV,EAAQW,6BAC9C,qBAAKrD,MAAO,CAACuG,SAAU,KAAvB,SACI,eAAC,IAAD,CAAOD,UAAU,WAAjB,UACA,0CADA,IACiB,cAAC,IAAD,CAAOE,MAAI,EAACC,MAAO,cAAC,IAAD,CAASvL,KAAK,aAAjC,SAChBmJ,OAAOC,KAAK5B,EAAQoB,UAAUvF,KAAI,SAAAgG,GAC/B,IAAMwB,EAAerD,EAAQoB,SAASS,GACtC,GAAIwB,EACA,OAAO,cAAC,EAAD,CAAmBD,aAAcvB,EAAKwB,aAAcA,GAAtCxB,oBAY1BmC,GA5HqC,SAAC,GAKsB,IALrBhE,EAKoB,EALpBA,QACGvF,EAIiB,EAJjBA,OACA0E,EAGiB,EAHjBA,iBACAC,EAEiB,EAFjBA,QACA6E,EACiB,EADjBA,UACA/D,EAAiB,EAAjBA,YAErD,EAA8BrB,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACMzD,EAAW2B,cACX0F,EAAsBxF,YAAY+G,KAClC3B,EAAapF,YAAYmF,GAK/B,EAAgDzD,mBAAS0D,GAAzD,mBAAyBO,GAAzB,WAaA,GAXA7D,qBAAU,WAEN6D,EAAoBP,KACrB,CAACA,KAQCvC,EACD,OAAO,cAACmE,EAAA,EAAD,IAkBX,OAAO,sBAAKlG,UAAW7D,IAAEgK,UAAlB,UACC,eAAC,IAAD,CAAK9G,MAAO,CAACuG,SAAU,KAAvB,UACI,sBAAK5F,UAAW7D,IAAEiK,UAAlB,UACI,qBAAKC,IAA6B,MAAxBtE,EAAQuE,OAAOC,MAAgBxE,EAAQuE,OAAOC,MAAQC,IAAWC,IAAI,WAC9EtF,GAAW,wBAAOnB,UAAW7D,IAAEuK,gBAApB,UAAqC,iHAC7C,uBAAO1G,UAAW7D,IAAEwK,KAAM5M,GAAG,OAAOQ,KAAK,OAAO8G,SApBxC,SAACxF,GAAsC,IAAD,GAC9D,UAAIA,EAAEyJ,OAAOsB,aAAb,aAAI,EAAgB3I,SAChB+H,EAAUnK,EAAEyJ,OAAOsB,MAAM,aAoBrB,+BACMzF,GAAW,cAAC,EAAD,CAAmBqD,iBAAkBF,EAAYG,OAAQ1C,EAAQ0C,OAAQG,OAjBnF,SAACH,GAChBpH,EAASuH,YAAOH,GAAQ,KAiBoBE,SAd3B,SAACF,GAClBpH,EAASsH,YAASF,GAAQ,KAa0CC,oBAAqBA,EAAqBG,oBAAqBA,SAG/H,sBAAK7E,UAAW7D,IAAE0K,iBAAlB,UACI,6BAAK9E,EAAQQ,WACb,cAAC,EAAD,CAAwB/F,OAAQA,EACR2E,QAASA,EACTD,iBAAkBA,IAEzCL,EAAW,cAACiG,EAAD,CAAiB/E,QAASA,EACTE,YAAaA,EACbD,mBAAoB,WAAOlB,GAAY,MAC9D,cAAC,GAAD,CAAaiB,QAASA,EACTZ,QAASA,EACTqE,iBAAkB,WAAO1E,GAAY,a,kGC3FjEgB,GAAQD,IAARC,KAuCQiF,GA3BmB,SAACrN,GAC/B,OAAO,gCACH,eAAC,IAAD,CAAKsG,UAAW7D,KAAE8D,KAAlB,UACI,cAAC,KAAD,CAAK+G,KAAK,OAAV,SACI,qBAAKX,IAAKG,IAAWC,IAAI,OAE7B,eAAC,KAAD,CAAKO,KAAK,QAAV,UACI,qBAAKhH,UAAW7D,KAAE8K,YAAlB,SACI,cAAC,GAAD,UAAOvN,EAAMQ,YAEjB,8BACKR,EAAMwN,QAAU,cAAC,IAAD,CAAQhF,KAAK,QAAQiF,MAAM,QAAQjH,KAAM,cAACkH,GAAA,EAAD,CAAYpH,UAAW7D,KAAEkL,iBAAmB9G,QAAS,kBAAM7G,EAAM4N,WAAW5N,EAAMK,KAA3H,SACT,sBAAMiG,UAAW7D,KAAEoL,WAAnB,SAAgC7N,EAAM6N,eAC5C,cAAC,IAAD,CAAQrF,KAAK,QAAQiF,MAAM,QAAQjH,KAAM,cAACsH,GAAA,EAAD,CAAcxH,UAAW7D,KAAEkL,iBAAmB9G,QAAS,kBAAM7G,EAAM+N,SAAS/N,EAAMK,KAA3H,SACM,sBAAMiG,UAAW7D,KAAEoL,WAAnB,SAAgC7N,EAAM6N,oBAGtD,cAAC,KAAD,UACI,cAACG,GAAA,EAAD,CAAe1H,UAAW7D,KAAEwL,WAAYpH,QAAS,kBAAM7G,EAAMkO,WAAWlO,EAAMK,YAGtF,cAAC,IAAD,QCQF8N,GAA6C,SAACnO,GAChD,MAAeoO,IAAKC,UAAbC,EAAP,oBASA,OAAO,eAAC,IAAD,CACHA,KAAMA,EACN9F,KAAM,SACNC,WAAY,CAAEC,KAAM,IACpBC,SARa,SAACC,IAJA,SAACA,GACf5I,EAAMuO,QAAQ3F,EAAO4F,aAIrBC,CAAU7F,GACV0F,EAAKI,eAOL/I,MAAO,CAACD,MAAO,QACfgE,cAAe,CACX8E,YAAa,IAPd,UAUH,cAAC,IAAKnI,KAAN,CAAW/F,KAAK,cAAhB,SACI,cAAC,IAAMyJ,SAAP,CAAgB4E,YAAY,EAAMC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GAAKC,WAAS,EAACC,UAAW,IAAKhH,YAAY,yBAElH,cAAC,IAAK3B,KAAN,UACI,cAAC,IAAD,CAAQxF,KAAK,UAAUuJ,SAAS,SAAhC,wBAOG6E,GA9D6C,SAACjP,GACzD,IAAMkP,EAAa,SAAC7O,GAChBL,EAAM+N,SAAS1N,IAEb8O,EAAe,SAAC9O,GAClBL,EAAM4N,WAAWvN,IAEf+O,EAAe,SAAC/O,GAClBL,EAAMkO,WAAW7N,IAEjBgP,EAAgB,aAAIrP,EAAMsP,OACzBC,UACArL,KAAI,SAAAsL,GAAC,OAAI,cAAC,GAAD,CAAMtB,WAAYkB,EAAcrB,SAAUmB,EAAYtB,WAAYuB,EAAc3O,QAASgP,EAAEhP,QAASqN,WAAY2B,EAAE3B,WAAYL,QAASgC,EAAEhC,QAASnN,GAAImP,EAAEnP,IAASmP,EAAEnP,OAEjL,OAAO,sBAAKiG,UAAW7D,KAAEgN,UAAlB,UACH,cAAC,IAAD,IACA,0CACA,cAAC,GAAD,CAAalB,QAASvO,EAAMuO,UAC5B,cAAC,IAAD,IACA,qBAAKjI,UAAW7D,KAAE6M,MAAlB,SACKD,QCpBEK,GAHU3P,aANH,SAACL,GACnB,MAAO,CACH4P,MAAO5P,EAAM4K,YAAYgF,SAKZ,CAACf,QAAS9N,KAAQkP,UAAW5B,SAAUtN,KAAQsN,SAAUH,WAAYnN,KAAQmN,WAAYM,WAAYzN,KAAQmP,cADzG7P,CACwHkP,I,mBCSpIY,IALU1H,IAAfC,KAAeD,IAAToD,KAKuC,SAACvL,GAElD,IAAM8P,EAAQtK,YAAYuK,KAEpBC,EAAkBxK,YAAYyK,KAI9B3M,EAAqB,CACvByD,KAAM,GACNC,QAAQ,GAGZ,EAA0DE,mBAAS8I,GAAnE,mBAA8BE,GAA9B,WAEA5I,qBAAU,WACN3D,EAASmD,YAXO,EACH,EAUgCxD,MAC/C,IAEFgE,qBAAU,WACN4I,EAAyBF,GACzBrM,EAASmD,YAhBO,EACH,EAegCxD,MAC9C,CAAC0M,IAGwBxK,YAAY+G,KAAxC,IAGM5I,EAAW2B,cAyBjB,OACI,8BAcI,sBAAKgB,UAAW7D,IAAE0N,YAAlB,UACI,cAAC,IAAD,CAASjQ,GAAI,0BAAb,SACI,oBAAIoG,UAAW7D,IAAE2N,QAAjB,oCAEJ,cAAC,IAAD,CAAKC,QAAQ,eAAb,SACKP,EAAM5L,KAAI,SAAAoM,GAAC,OAAI,qBAAgBhK,UAAW7D,IAAE8N,SAA7B,SACR,cAAC,IAAD,CAASrQ,GAAI,YAAcoQ,EAAEjQ,GAA7B,SACI,cAAC,KAAD,CAAKqI,KAAM,GAAX,SACI,eAAC,KAAD,CAAS9B,MAAO0J,EAAEhQ,KAAlB,UACI,cAAC,KAAD,CAAQmN,MAAM,SAASjF,KAAM,GAAIhC,KAAM8J,EAAE1D,OAAO4D,MAAQ,qBAAK7D,IAAK2D,EAAE1D,OAAO4D,MAAOzD,IAAI,WACjF,cAACtG,EAAA,EAAD,MACL,oBAAIH,UAAW7D,IAAEgO,SAAjB,SACKH,EAAEhQ,eAPDgQ,EAAEjQ,SAgBhC,cAAC,IAAD,CAASH,GAAI,0BAAb,SACA,oBAAIoG,UAAW7D,IAAE2N,QAAjB,8BCtEDM,GAzBsB,SAAC1Q,GAIlC,OACI,gCACI,cAAC,GAAD,CAAasM,UAAWtM,EAAMsM,UACjB7E,QAASzH,EAAMyH,QACfY,QAASrI,EAAMqI,QACfvF,OAAQ9C,EAAM8C,OACdyF,YAAavI,EAAMuI,YACnBf,iBAAkBxH,EAAMwH,mBACrC,eAAC,IAAD,WACI,cAAC,KAAD,CAAK8F,KAAK,QAAV,SACI,cAAC,GAAD,MAEJ,cAAC,KAAD,CAAK5E,KAAM,GAAX,SACI,cAAC,GAAD,a,4BCgBdiI,G,oKAEF,WACI,IAAI5F,GAAyB6F,KAAK5Q,MAAM6Q,MAAMC,OAAO/F,OAChDA,IACDA,EAAS6F,KAAK5Q,MAAM+Q,mBAEhBH,KAAK5Q,MAAMgR,QAAQ3N,KAAK,UAG5B0H,IACA6F,KAAK5Q,MAAMiR,kBACXL,KAAK5Q,MAAMkR,mBACXN,KAAK5Q,MAAMmR,WAAWpG,GACtB6F,KAAK5Q,MAAMoR,kBAAkBrG,GAC7B6F,KAAK5Q,MAAMqR,cAActG,M,+BAIjC,WACI6F,KAAKU,mB,gCAGT,SAAmBC,EAAsBC,GACjCZ,KAAK5Q,MAAM6Q,MAAMC,OAAO/F,QAAUwG,EAAUV,MAAMC,OAAO/F,QACzD6F,KAAKU,mB,oBAIb,WAEI,OAAKV,KAAK5Q,MAAMqI,QAELuI,KAAK5Q,MAAMwK,mBAEXoG,KAAK5Q,MAAM0K,mBADX,cAAC8B,EAAA,EAAD,IAKP,cAAC,IAAD,UACI,cAAC,KAAD,CAAKc,KAAM,OAAX,SACI,cAAC,GAAD,2BAAasD,KAAK5Q,OAAlB,IACSyH,SAAUmJ,KAAK5Q,MAAM6Q,MAAMC,OAAO/F,OAClC1C,QAASuI,KAAK5Q,MAAMqI,QACpBvF,OAAQ8N,KAAK5Q,MAAM8C,OACnB0E,iBAAkBoJ,KAAK5Q,MAAMwH,iBAC7B8E,UAAWsE,KAAK5Q,MAAMsM,UACtB3M,OAAQiR,KAAK5Q,MAAML,OACnB4I,YAAaqI,KAAK5Q,MAAMuI,mBAhBlC,cAACiE,EAAA,EAAD,Q,GAhCYiF,IAAMC,WAkEtBC,gBACX5R,aAVkB,SAACL,GAAD,MAA4C,CAC9D2I,QAASgC,EAAmB3K,GAC5BoD,OAAQpD,EAAM4K,YAAYxH,OAC1BiO,iBAAkBrR,EAAME,KAAKmL,OAC7BpL,OAAQiS,aAAUlS,GAClB8K,kBAAmBD,EAAqB7K,GACxCgL,mBAAoBD,EAAsB/K,MAIoD,CAACyR,gBAC3FE,mBAAe7J,sBAAkB8E,eAAW/D,iBAAa0I,qBAAiBC,sBAAkBE,yBAChGS,IACAhS,KAJW8R,CAKbhB,I,SCvHExQ,GAAe,CACf2R,aAAa,GAmBJrR,GACW,iBAAO,CAACI,KAAM,+BAevBkR,GA7BI,WAAmE,IAAlErS,EAAiE,uDAAzDS,GAAcY,EAA2C,uCACjF,MACS,+BADDA,EAAOF,KAEA,2BACAnB,GADP,IAEIoS,aAAa,IAGVpS,G,8BCTfsS,GAAcC,aAAgB,CAC9B3H,YAAa4H,KACbC,YAAarR,KACbsR,UAAWC,IACXzS,KAAM0S,KACNC,IAAKR,GACLS,KAAMvO,OAWJwO,GAAmBC,OAAOC,sCAAwChB,KAClEiB,GAAQC,aAAYb,GAAaS,GAAiBK,aAAgBC,QAGxEL,OAAOM,UAAYJ,GACJA,UC3BR,SAASK,GAAkBnT,GAC9B,OAAO,SAACE,GACA,OAAO,cAAC,IAAMkT,SAAP,CAAgBC,SAAU,cAAC3G,EAAA,EAAD,IAA1B,SACH,cAAC1M,EAAD,eAAsBE,O,yBCPvB,OAA0B,iCCY5BoT,GAAqD,SAACpT,GAE/D,IAAOoT,EAAUhO,IAAVgO,OACDzT,EAAS6F,YAAYoM,MACrByB,EAAQ7N,YAAY8N,MACpB3P,EAAW2B,cAKjB,OAAO,cAAC8N,EAAD,CAAQ9M,UAAU,SAAUX,MAAO,CAAEI,SAAU,QAASC,OAAQ,EAAGN,MAAO,QAA1E,SACH,qBAAKC,MAAO,CAACuG,SAAU,IAAMqH,OAAQ,QAArC,SACI,eAAC,IAAD,CAAKlD,QAAQ,SAAb,UACI,cAAC,KAAD,CAAK3H,KAAM,GAAX,SACI,cAAC,IAAD,CAASxI,GAAI,WAAb,SACI,qBAAKoG,UAAW7D,KAAE+Q,KAAM7G,IAAK8G,SAGpC9T,EAAS,qCACF,cAAC,KAAD,CAAK+I,KAAM,EAAX,SACI,cAAC,KAAD,CAAS9B,MAAM,WAAf,SACA,cAAC,IAAD,CAAS1G,GAAI,WAAb,SACI,6BAAKmT,UAIb,cAAC,KAAD,CAAK/M,UAAW7D,KAAEiR,SAAUhL,KAAM,EAAlC,SACI,cAAC,IAAD,CAAQ7H,KAAK,UAAUgG,QArBxB,WACnBlD,EAASgQ,iBAoBW,0BAIR,cAAC,KAAD,CAAKjL,KAAM,YCnBxBkL,IADa1O,IAAZD,QACkBG,IAAnBwO,SAASC,GAAUzO,IAAVyO,OAEVC,GAAOrC,IAAMsC,MAAK,kBAAM,iCACxBC,GAAWvC,IAAMsC,MAAK,kBAAM,iCAC5BE,GAAmBxC,IAAMsC,MAAK,kBAAM,iCACpCG,GAAYzC,IAAMsC,MAAK,kBAAM,wDAC7BI,GAAY1C,IAAMsC,MAAK,kBAAM,iCAC7BK,GAAW3C,IAAMsC,MAAK,kBAAM,uDAE5BM,GAAmBpB,GAAagB,IAChCK,GAAiBrB,GAAaiB,IAC9BK,GAAqBtB,GAAakB,IAClCK,GAAoBvB,GAAamB,IAEjCK,G,4MACFC,wBAA0B,SAACvS,GACvBN,QAAQC,IAAI,wB,uDAEhB,WACI8O,KAAK5Q,MAAM2U,gBACXjC,OAAOzP,iBAAiB,qBAAsB2N,KAAK8D,2B,kCAEvD,WACIhC,OAAO7P,oBAAoB,qBAAsB+N,KAAK8D,2B,oBAG1D,WACI,OAAK9D,KAAK5Q,MAAM8R,YAGZ,eAAC,IAAD,WACI,cAAC,GAAD,IACA,cAAC8B,GAAD,UAMI,cAAC,IAAD,CAAQtN,UAAU,yBAAyBX,MAAO,CAACuG,SAAS,IAAMqH,OAAQ,OAAQ3N,QAAS,UAA3F,SAEI,eAAC,IAAD,CAAKyK,QAAQ,SAAb,UACI,cAAC,KAAD,UACI,cAAC,EAAD,MAEJ,eAAC,KAAD,WACI,cAACuD,GAAD,CAASjO,MAAO,CAAEC,QAAS,aAAcE,OAAQ,QAAjD,SACI,eAAC,IAAD,yBACe,cAAC,IAAD,CAAO8O,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAU5U,GAAI,gBADjE,cAEe,cAAC,IAAD,CAAO2U,KAAK,WAAWC,OAAQ,kBAAM,cAACT,GAAD,OAFpD,cAGe,cAAC,IAAD,CAAOQ,KAAK,oBAAoBC,OAAQ,kBAAM,cAAC,GAAD,OAH7D,cAIe,cAAC,IAAD,CAAOD,KAAK,cAAcC,OAAQ,kBAAM,cAACR,GAAD,OAJvD,cAKe,cAAC,IAAD,CAAOO,KAAK,QAAQC,OAAQ7B,GAAaa,MALxD,cAMe,cAAC,IAAD,CAAOe,KAAK,YAAYC,OAAQ7B,GAAae,MAN5D,cAOe,cAAC,IAAD,CAAOa,KAAK,SAASC,OAAQ,kBAAM,cAACP,GAAD,OAPlD,cAQe,cAAC,IAAD,CAAOM,KAAK,IAAIC,OAAQ,kBAAM,mDAR7C,mBAWJ,cAACN,GAAD,cAMhB,cAACX,GAAD,CAAQlO,MAAO,CAAEoP,UAAW,UAA5B,mEAnCG,cAACvI,EAAA,EAAD,Q,GAdDiF,IAAMC,WA2DlBsD,GAAerD,aACjBE,IACA9R,aANoB,SAACL,GAAD,MAA0B,CAC9CoS,YAAapS,EAAM6S,IAAIT,eAKE,CAAC6C,cLtED,WACzB,OAAO,SAAChR,GACUA,EAASsR,gBACftQ,MAAK,WACThB,EAASlD,aKgEAkR,CAE0B8C,IAUhCS,GARgB,WAC3B,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUtC,MAAOA,GAAjB,SACI,cAACoC,GAAD,SClGhBG,IAASL,OAAO,cAAC,GAAD,IAAkBM,SAASC,eAAe,SAQ1D7Q,K,gCCfA,0GAWY8Q,EAIAC,EAfZ,SAGaC,EAHb,OAGwBC,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,2C,SAIPP,O,qBAAAA,I,kBAAAA,M,cAIAC,O,2CAAAA,M,2YCRCO,EAAa,SACX/K,GACP,OAAOyK,IAASO,IAAT,kBAAqChL,IAAUpG,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SAFjEuT,EAAa,SAIZ/K,GACN,OAAOyK,IAASO,IAAT,yBAAuChL,IAAUpG,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SALnEuT,EAAa,SAOThT,GACT,OAAO0S,IAASS,IAAT,kBAAiD,CAACnT,OAAQA,IAAS6B,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SARrFuT,EAAa,SAUZI,GACN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBV,IAASS,IAAT,iBAA+DE,EAAU,CAC5EN,QAAS,CACL,eAAgB,yBAErBlR,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SAjBduT,EAAa,SAmBVzN,GACR,OAAOmN,IAASS,IAAT,WAA0C5N,GAAS1D,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,S,QCtB9EpC,EAAe,CACfmP,MAAO,CACH,CAACjP,GAAI,EAAGG,QAAS,aAAcqN,WAAY,GAAIL,SAAS,GACxD,CAACnN,GAAI,EAAGG,QAAS,eAAgBqN,WAAY,GAAIL,SAAS,GAC1D,CAACnN,GAAI,EAAGG,QAAS,6GAA8GqN,WAAY,EAAGL,SAAS,IAE3JnF,QAAS,KACTvF,OAAQ,GACR0H,mBAAmB,EACnBE,oBAAoB,EACpBE,WAAY,MAiEHnK,EAAU,CACnBkP,UAAW,SAACnB,GAAD,MAA0B,CAAC3N,KAAM,sBAAuB2N,gBACnEoB,aAAc,SAAC0G,GAAD,MAAqB,CAACzV,KAAM,yBAA0ByV,WACpEC,eAAgB,SAAClO,GAAD,MAA2B,CAACxH,KAAM,8BAA+BwH,YACjFmO,cAAe,SAAC1T,GAAD,MAAqB,CAACjC,KAAM,6BAA8BiC,WACzE2T,iBAAkB,SAAC7J,GAAD,MAAyB,CAAC/L,KAAM,gCAAiC+L,WACnF8J,wBAAyB,SAAClM,GAAD,MAAiC,CAAC3J,KAAM,wCAAyC2J,sBAC1GmM,yBAA0B,SAACjM,GAAD,MAAkC,CAAC7J,KAAM,yCAA0C6J,uBAC7GkM,cAAe,SAAChM,GAAD,MAAiC,CAAC/J,KAAM,6BAA8B+J,eACrFmD,SAAU,SAACuI,GAAD,MAAqB,CAACzV,KAAM,uBAAwByV,WAC9D1I,WAAY,SAAC0I,GAAD,MAAqB,CAACzV,KAAM,yBAA0ByV,YAGzDrF,EAAkB,kBAAM,SAACtN,GAClCA,EAASlD,EAAQiW,yBAAwB,MAGhCvF,EAAa,SAACpG,GAAD,8CAA+B,WAAOpH,GAAP,eAAAI,EAAA,sEAClC+R,EAAsB/K,GADY,OAC/CxI,EAD+C,OAErDoB,EAASlD,EAAQ8V,eAAehU,IAChCoB,EAASlD,EAAQiW,yBAAwB,IAHY,2CAA/B,uDAMbrF,EAAgB,SAACtG,GAAD,8CAA+B,WAAOpH,GAAP,eAAAI,EAAA,sEACrC+R,EAAqB/K,GADgB,OAClDxI,EADkD,OAExDoB,EAASlD,EAAQ+V,cAAcjU,IAFyB,2CAA/B,uDAKhBiF,EAAmB,SAAC1E,GAAD,8CAA+B,WAAOa,GAAP,SAAAI,EAAA,+EAEpC+R,EAAwBhT,GAFY,OAG/B,IAH+B,OAG9C+T,YACLlT,EAASlD,EAAQ+V,cAAc1T,IAJoB,uGAA/B,uDAWnBwJ,EAAY,SAACW,GAAD,8CAA2B,WAAOtJ,GAAP,eAAAI,EAAA,sEAC7B+R,EAAqB7I,GADQ,OAExB,KADlB1K,EAD0C,QAEvCsU,YACLlT,EAASlD,EAAQgW,iBAAiBlU,EAAKA,KAAKqK,SAHA,2CAA3B,uDAOZrE,EAAc,SAACF,GAAD,8CAAqC,WAAO1E,EAAUmT,GAAjB,eAAA/S,EAAA,6DACtDgH,EAAS+L,IAAWlX,KAAKmL,OAD6B,SAEzC+K,EAAuBzN,GAFkB,UAGpC,IAHoC,OAGnDwO,WAHmD,oBAI1C,MAAV9L,EAJoD,gBAKpDpH,EAASwN,EAAWpG,IALgC,6BAO9C,IAAIgM,MAAM,wBAPoC,4CAArC,yDAYd7F,EAAmB,kBAAM,SAACvN,GACnCA,EAASlD,EAAQkW,0BAAyB,MAGjCvF,EAAoB,SAACrG,GAAD,8CAA+B,WAAOpH,GAAP,eAAAI,EAAA,sEACnCiT,IAAS5F,kBAAkBrG,GADQ,OACtDH,EADsD,OAG5DjH,EAASlD,EAAQmW,cAAchM,IAC/BjH,EAASlD,EAAQkW,0BAAyB,IAJkB,2CAA/B,uDAOlBzE,IAnIQ,WAAmE,IAAlExS,EAAiE,uDAAzDS,EAAcY,EAA2C,uCACrF,OAAQA,EAAOF,MACX,IAAK,sBACD,IAAIoW,EAAU,CACV5W,GAAIX,EAAM4P,MAAM/K,OAAS,EACzB/D,QAASO,EAAOyN,YAChBX,WAAY,EACZL,SAAS,GAEb,OAAO,2BACA9N,GADP,IAEI4P,MAAM,GAAD,mBAAM5P,EAAM4P,OAAZ,CAAmB2H,MAGhC,IAAK,8BACD,OAAO,2BAAIvX,GAAX,IAAkB2I,QAAStH,EAAOsH,UAEtC,IAAK,6BACD,OAAO,2BAAI3I,GAAX,IAAkBoD,OAAQ/B,EAAO+B,SAErC,IAAK,yBACD,OAAO,2BAAIpD,GAAX,IAAkB4P,MAAO5P,EAAM4P,MAAMhM,QAAO,SAAAkM,GAAC,OAAIA,EAAEnP,IAAMU,EAAOuV,YAEpE,IAAK,gCACD,OAAO,2BAAI5W,GAAX,IAAkB2I,QAAQ,2BAAK3I,EAAM2I,SAAZ,IAAqBuE,OAAQ7L,EAAO6L,WAEjE,IAAK,wCACD,OAAO,2BAAIlN,GAAX,IAAkB8K,kBAAmBzJ,EAAOyJ,oBAEhD,IAAK,yCACD,OAAO,2BAAI9K,GAAX,IAAkBgL,mBAAoB3J,EAAO2J,qBAEjD,IAAK,6BACD,OAAO,2BAAIhL,GAAX,IAAkBkL,WAAY7J,EAAO6J,aAEzC,IAAK,uBACD,IAAIsM,EAAexX,EAAM4P,MAAMpO,MAAK,SAAAsO,GAAC,OAAIA,EAAEnP,KAAOU,EAAOuV,UACrDa,EAAoBzX,EAAM4P,MAAMjO,WAAU,SAAAmO,GAAC,OAAIA,EAAEnP,KAAOU,EAAOuV,UAE/Dc,EAAW,2BAAOF,GAAP,IAAqBrJ,WAAYqJ,EAAarJ,WAAa,EAAGL,SAAS,IAClF6J,EAAY3X,EAAM4P,MAAM9N,QAG5B,OADA6V,EAAU5V,OAAO0V,EAAmB,EAAGC,GAChC,2BAAI1X,GAAX,IACI4P,MAAO+H,IAEf,IAAK,yBACD,IAAIH,EAAexX,EAAM4P,MAAMpO,MAAK,SAAAsO,GAAC,OAAIA,EAAEnP,KAAOU,EAAOuV,UACrDa,EAAoBzX,EAAM4P,MAAMjO,WAAU,SAAAmO,GAAC,OAAIA,EAAEnP,KAAOU,EAAOuV,UAE/Dc,EAAW,2BAAOF,GAAP,IAAqBrJ,WAAYqJ,EAAarJ,WAAa,EAAGL,SAAS,IAClF6J,EAAY3X,EAAM4P,MAAM9N,QAG5B,OADA6V,EAAU5V,OAAO0V,EAAmB,EAAGC,GAChC,2BAAI1X,GAAX,IACI4P,MAAO+H,IAEf,QACI,OAAO3X,K,mBC3EnBH,EAAOC,QAAU,CAAC,UAAY,+BAA+B,iBAAmB,sCAAsC,UAAY,+BAA+B,gBAAkB,qCAAqC,KAAO,0BAA0B,QAAU,6BAA6B,iBAAmB,sCAAsC,gBAAkB,qCAAqC,YAAc,mC,mNCDjZ8X,EAAsB,SAACC,EAAYC,EAAaC,EAAkBC,GAC3E,OAAOH,EAAMrT,KAAI,SAACoM,GACd,OAAIA,EAAEmH,KAAiBD,EACZ,2BAAIlH,GAAMoH,GAEdpH,M,gBCGXnQ,EAAe,CACf2P,MAAO,GACPvK,SAAU,IACVyK,gBAAiB,EACjB2H,YAAa,EACbC,YAAY,EACZ5M,oBAAqB,GACrB1H,OAAQ,CACJyD,KAAM,GACNC,OAAQ,OAiDHF,EAAe,SAAC+Q,EAActS,EAAkBjC,GACzD,8CAAO,WAAOK,EAAUmT,GAAjB,eAAA/S,EAAA,6DACHJ,EAASlD,EAAQqX,kBAAiB,IAClCnU,EAASlD,EAAQsX,eAAeF,IAChClU,EAASlD,EAAQuX,UAAU1U,IAHxB,SAKc0T,IAASjH,SAAS8H,EAAMtS,EAAUjC,EAAOyD,KAAMzD,EAAO0D,QALpE,OAKCzE,EALD,OAMHoB,EAASlD,EAAQqX,kBAAiB,IAClCnU,EAASlD,EAAQwX,SAAS1V,EAAKgV,QAC/B5T,EAASlD,EAAQyX,mBAAmB3V,EAAK4V,aARtC,2CAAP,yDAiBEC,EAAmB,uCAAG,WAAOzU,EACAoH,EACA/D,EACAqR,EACAC,GAJP,eAAAvU,EAAA,6DAKxBJ,EAASlD,EAAQ8X,yBAAwB,EAAMxN,IALvB,SAMHsN,EAAUtN,GANP,UAOI,IAPJ,OAOX8L,WAPW,wBAQpBlT,EAAS2U,EAAcvN,IARH,SASHiM,IAASjH,SAAS,EAAG,GAAI,GAAI/I,GAT1B,OAShBzE,EATgB,OAUpBoB,EAASlD,EAAQyX,mBAAmB3V,EAAK4V,aACzCxU,EAAS6U,IAAe5B,cAAc5P,IAXlB,QAaxBrD,EAASlD,EAAQ8X,yBAAwB,EAAOxN,IAbxB,4CAAH,8DAgBZG,EAAS,SAACH,EAAgB/D,GAAjB,8CAAwD,WAAOrD,GAAP,SAAAI,EAAA,sEACpEqU,EAAoBzU,EAAUoH,EAAQ/D,EAASgQ,IAAS9L,OAAOuN,KAAKzB,KAAWvW,EAAQiY,eADnB,2CAAxD,uDAITzN,EAAW,SAACF,EAAgB/D,GAAjB,8CAAwD,WAAOrD,GAAP,SAAAI,EAAA,sEACtEqU,EAAoBzU,EAAUoH,EAAQ/D,EAAQgQ,IAAS/L,SAASwN,KAAKzB,KAAWvW,EAAQkY,iBADlB,2CAAxD,uDAIXlY,EAAU,CACnBiY,cAAe,SAAC3N,GAAD,MAAqB,CAAClK,KAAM,kBAAmBkK,WAC9D4N,gBAAiB,SAAC5N,GAAD,MAAqB,CAAClK,KAAM,oBAAqBkK,WAClEkN,SAAU,SAACnI,GAAD,MAA6B,CAACjP,KAAM,qBAAsBiP,UACpEiI,eAAgB,SAACJ,GAAD,MAA0B,CAAC9W,KAAM,4BAA6B8W,gBAC9EK,UAAW,SAAC1U,GAAD,MAAyB,CAACzC,KAAM,sBAAuB2C,QAAS,CAACF,YAC5E4U,mBAAoB,SAAClI,GAAD,MAA8B,CAACnP,KAAM,iCAAkC+X,MAAO5I,IAClG6I,YAAa,SAACtT,GAAD,MAAuB,CAAC1E,KAAM,yBAA0B0E,SAAUA,IAC/EuS,iBAAkB,SAACF,GAAD,MAA0B,CAAC/W,KAAM,8BAA+B+W,eAClFW,wBAAyB,SAACX,EAAqB7M,GAAtB,MAA0C,CAC/DlK,KAAM,wCAAyC+W,aAAY7M,WAC/D6L,cAAe,SAAChM,GAAD,MAAiC,CAAC/J,KAAM,6BAA8B+J,gBAG1EyH,IArGM,WAAmE,IAAlE3S,EAAiE,uDAAzDS,EAAcY,EAA2C,uCACnF,OAAQA,EAAOF,MACX,IAAK,kBACD,OAAO,2BACAnB,GADP,IAEIoQ,MAAOwH,EAAoB5X,EAAMoQ,MAAO/O,EAAOgK,OAAQ,KAAM,CAAC+N,UAAU,MAEhF,IAAK,oBACD,OAAO,2BACApZ,GADP,IAEIoQ,MAAOwH,EAAoB5X,EAAMoQ,MAAO/O,EAAOgK,OAAQ,KAAM,CAAC+N,UAAU,MAEhF,IAAK,qBACD,OAAO,2BACApZ,GADP,IACcoQ,MAAO/O,EAAO+O,QAEhC,IAAK,4BACD,OAAO,2BACApQ,GADP,IACciY,YAAa5W,EAAO4W,cAEtC,IAAK,iCACD,OAAO,2BACAjY,GADP,IACcsQ,gBAAiBjP,EAAO6X,QAEtC,IAAK,yBACL,OAAO,2BACAlZ,GADP,IACc6F,SAAUxE,EAAOwE,WAEnC,IAAK,8BACD,OAAO,2BACA7F,GADP,IACckY,WAAY7W,EAAO6W,aAErC,IAAK,sBACD,OAAO,2BAAIlY,GAAX,IAAkB4D,OAAQvC,EAAOyC,QAAQF,SAC7C,IAAK,wCACD,OAAO,2BACA5D,GADP,IACcsL,oBAAqBjK,EAAO6W,WAAP,sBACrBlY,EAAMsL,qBADe,CACMjK,EAAOgK,SACtCrL,EAAMsL,oBAAoB1H,QAAO,SAAAjD,GAAE,OAAIA,GAAMU,EAAOgK,YAElE,QACI,OAAOrL,K,gCC9DJ,UAA0B,iC,cCQ1B8M,IALW,WACtB,OAAO,qBAAK7G,MAAQ,CAACoT,gBAAiB,SAA/B,SACH,qBAAKpM,IAAKqM,EAAWjM,IAAI,kB,gCCLjC,8CAGaiK,EAAW,CACpBjH,SADoB,WACoE,IAA/E4H,EAA8E,uDAAhE,EAAGpS,EAA6D,uDAAlD,IAAKwB,EAA6C,uCAA/BC,EAA+B,uDAAN,KAC7E,OAAOwO,IAASO,IAAkB,qBAAc4B,EAAd,kBAAmCpS,EAAnC,iBAAoDwB,IACpE,OAAXC,EAAkB,GAAlB,kBAAkCA,KACpCrC,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SAEzB2I,OANoB,SAMbH,GACH,OAAOyK,IAASyD,KAAT,iBAAyClO,IAAUpG,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SAE9E0I,SAToB,SASXF,GACL,OAAOyK,IAAS0D,OAAT,iBAA2CnO,IAAUpG,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SAEhF6O,kBAZoB,SAYFrG,GACd,OAAOyK,IAASO,IAAT,iBAAwChL,IAAUpG,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,W,mBCfjFhD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,aAAe,4BAA4B,KAAO,oBAAoB,cAAgB,6BAA6B,YAAc,2BAA2B,SAAW,wBAAwB,YAAc,2BAA2B,QAAU,uBAAuB,SAAW,0B,gCCD3U,2PAOauQ,EAAWoJ,aAJS,SAACzZ,GAC9B,OAAOA,EAAM0S,UAAUtC,SAG8B,SAACA,GACrD,OAAOA,EAAMxM,QAAO,SAAAgN,GAAC,OAAI,QAIhB7K,EAAc,SAAC/F,GACzB,OAAOA,EAAM0S,UAAU7M,UAGb0K,EAAqB,SAACvQ,GAChC,OAAOA,EAAM0S,UAAUpC,iBAEboJ,EAAiB,SAAC1Z,GAC5B,OAAOA,EAAM0S,UAAUuF,aAGb0B,EAAgB,SAAC3Z,GAC3B,OAAOA,EAAM0S,UAAUwF,YAGbrL,EAAyB,SAAC7M,GACpC,OAAOA,EAAM0S,UAAUpH,qBAGbsO,EAAiB,SAAC5Z,GAC5B,OAAOA,EAAM0S,UAAU9O,S,mBC/B3B/D,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,0BAA0B,WAAa,yBAAyB,eAAiB,6BAA6B,WAAa,2B,kLCSxK+Z,EAAU,WAEf,OAAO/D,IAASO,IAAT,WAA6DpR,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SAF/EgX,EAAU,SAIbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAOnE,IAASyD,KAAT,aAA6G,CAACO,QAAOC,WAAUC,aAAYC,YAC7IhV,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SANhBgX,EAAU,WASf,OAAO/D,IAAS0D,OAAT,eCbFU,EAAc,WAEnB,OAAOpE,IAASO,IAAT,4BAAoEpR,MAAK,SAAAqR,GAAG,OAAIA,EAAIzT,SCF/FpC,EAAe,CACf4K,OAAQ,KACRyO,MAAO,KACPnG,MAAO,KACP1T,QAAQ,EACRka,aAAa,EACbC,iBAAkB,KAClBC,WAAY,KACZC,mBAAoB,MAoBlBvZ,EACe,SAACsK,EAAuByO,EAAsBnG,EAAsB1T,GAApE,MACb,CAACkB,KAAM,wBAAyB2C,QAAS,CAACuH,SAAQyO,QAAOnG,QAAO1T,YAFlEc,EAGoB,SAACsZ,GAAD,MAClB,CAAClZ,KAAM,kCAAmC2C,QAAS,CAACuW,gBAJtDtZ,EAKa,SAACoZ,EAAsBrZ,GAAvB,MACX,CAACK,KAAM,0BAA2BgZ,cAAarZ,YAG1CyU,EAAkB,yDAAiB,WAAOtR,GAAP,uBAAAI,EAAA,sEACzBwV,IADyB,QACxCU,EADwC,QAEjCpD,aAAevB,IAAgB4E,UAAU,EACvBD,EAAO1X,KAA3BlC,EAD0C,EAC1CA,GAAImZ,EADsC,EACtCA,MAAOnG,EAD+B,EAC/BA,MAChB1P,EAASlD,EAAwBJ,EAAImZ,EAAOnG,GAAO,KAJX,2CAAjB,uDAQlBA,EAAQ,SAACmG,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAAkG,WAAOhW,GAAP,iBAAAI,EAAA,sEAC7FwV,EAAcC,EAAOC,EAAUC,EAAYC,GADkD,QAC/GQ,EAD+G,QAErGtD,aAAevB,IAAgB4E,QACzCvW,EAASsR,MAELkF,EAAUtD,aAAetB,IAAsB6E,mBAC/CzW,EAAS0W,KAET7Z,EAAU2Z,EAAU5Z,SAASgE,OAAS,EAAI4V,EAAU5Z,SAAS,GAAK,sBACtEoD,EAASlD,GAAsB,EAAMD,KAT0E,2CAAlG,uDAaR6Z,EAAgB,yDAAiB,WAAO1W,GAAP,iBAAAI,EAAA,sEACvB6V,IADuB,OACpCrX,EADoC,OAEpCwX,EAAaxX,EAAK+X,IACxB3W,EAASlD,EAA6BsZ,IAHI,2CAAjB,uDAMhBpG,EAAS,yDAAiB,WAAOhQ,GAAP,SAAAI,EAAA,sEACdwV,IADc,OAEF,IAFE,OAEtBhX,KAAKsU,YACdlT,EAASlD,EAAwB,KAAM,KAAM,MAAM,IAHpB,2CAAjB,uDAOP6R,IA5DK,WAAmE,IAAlE5S,EAAiE,uDAAzDS,EAAcY,EAA2C,uCAClF,OAAQA,EAAOF,MACX,IAAK,wBACL,IAAK,kCACD,OAAO,2BACAnB,GACAqB,EAAOyC,SAElB,IAAK,0BACD,OAAO,2BACA9D,GADP,IACcma,YAAa9Y,EAAO8Y,YAAaC,iBAAkB/Y,EAAOP,UAE5E,QACI,OAAOd,K,mBC7BnBH,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,gCCCrF,0KAAQ,IAAMoS,EAAY,SAAClS,GACvB,OAAOA,EAAME,KAAKD,QAMR4a,EAAiB,SAAC7a,GAC5B,OAAOA,EAAME,KAAKia,aAERvG,EAAsB,SAAC5T,GACjC,OAAOA,EAAME,KAAKyT,OAGRmH,EAAsB,SAAC9a,GACjC,OAAOA,EAAME,KAAKka,kBAGRW,EAAwB,SAAC/a,GACnC,OAAOA,EAAME,KAAKma,c","file":"static/js/main.90417ae2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.58b3f9a8.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__2JiiF\",\"posts\":\"MyPosts_posts__3HiZy\",\"error\":\"MyPosts_error__XU8cE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3G4qk\",\"loginBtn\":\"Header_loginBtn__1u0Qy\",\"logo\":\"Header_logo__15J62\",\"loginBlock\":\"Header_loginBlock__1y3f6\"};","import React from \"react\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"../redux/redux-store\"\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\ntype mapStatePropsForRedirectType = ReturnType<typeof mapStateToPropsForRedirect>\r\ntype mapDispatchPropsForRedirectType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<mapStatePropsForRedirectType & mapDispatchPropsForRedirectType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'login'}/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<mapStatePropsForRedirectType, {}, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import {DialogType, MessageType} from \"../types/types\"\r\nimport {InferActionsTypes} from \"./redux-store\"\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Petr A.',\r\n            messages: [\r\n                {id: 1, message: 'Hello Petr'},\r\n                {id: 2, message: 'Petr2'},\r\n                {id: 3, message: 'Petr3'}\r\n            ] as Array<MessageType>},\r\n        {id: 2, name: 'Anton B.',\r\n            messages: [\r\n                {id: 1, message: 'Hello Anton'},\r\n                {id: 2, message: 'Anton2'},\r\n                {id: 3, message: 'Anton3'}\r\n            ] as Array<MessageType>},\r\n        {id: 3, name: 'Alex C.',\r\n            messages: [\r\n                {id: 1, message: 'Hello Alex'},\r\n                {id: 2, message: 'Alex2'},\r\n                {id: 3, message: 'Alex3'}\r\n            ] as Array<MessageType>},\r\n        {id: 4, name: 'Gleb D.',\r\n            messages: [\r\n                {id: 1, message: 'Hello Gleb'},\r\n                {id: 2, message: 'Gleb2'},\r\n                {id: 3, message: 'Gleb3'}\r\n            ] as Array<MessageType>},\r\n        {id: 5, name: 'Artur E.',\r\n            messages: [\r\n                {id: 1, message: 'Hello Artur'},\r\n                {id: 2, message: 'Artur2'},\r\n                {id: 3, message: 'Artur3'}\r\n            ] as Array<MessageType>}\r\n    ] as Array<DialogType>\r\n\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let newMessage = {\r\n                id: 4,\r\n                message: action.newMessageText\r\n            }\r\n            let dialog = state.dialogs.find(d => d.id === action.dialogId)\r\n            let dialogIndex = state.dialogs.findIndex(d => d.id === action.dialogId)\r\n            if (dialog) {\r\n                let changedDialog = {...dialog, messages: [...dialog.messages, newMessage]}\r\n                let dialogsCopy = state.dialogs.slice()\r\n                dialogsCopy.splice(dialogIndex,1, changedDialog)\r\n                return {\r\n                    ...state,\r\n                    dialogs: dialogsCopy\r\n                }\r\n            } else {\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (dialogId: number, newMessageText: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', dialogId, newMessageText} as const)\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\nconst closeHandler = () => {\r\n    console.log('Close ws')\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.log('RESTART PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatApi = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback) // unsubscribe first variant\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback) // unsubscribe second variant\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\ntype EventNamesType = 'messages-received' | 'status-changed'\r\nexport type StatusType = 'pending' | 'ready' | 'error'","import {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {chatApi, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from 'uuid';\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/CHAT/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/CHAT/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => (\r\n        {type: 'SN/CHAT/MESSAGES_RECEIVED', payload: {messages}} as const),\r\n    statusChanged: (status: StatusType) => (\r\n        {type: 'SN/CHAT/STATUS_CHANGED', payload: {status}} as const)\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatApi.start()\r\n    chatApi.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatApi.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatApi.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatApi.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatApi.stop()\r\n}\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatApi.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useEffect, useState} from \"react\"\r\nimport s from './Navbar.module.css'\r\nimport {Link, NavLink} from \"react-router-dom\"\r\nimport {Layout, Menu} from \"antd\";\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined, MessageOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {FilterType, requestUsers} from \"../../redux/users-reducer\";\r\nimport {getPageSize} from \"../../redux/users-selectors\";\r\n\r\nconst { SubMenu } = Menu\r\nconst { Sider } = Layout\r\n\r\nconst Navbar: React.FC = () => {\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const pageSize = useSelector(getPageSize)\r\n    const onOnlyFriends = () => {\r\n        dispatch(requestUsers(1, pageSize, {term: '', friend: true}))\r\n    }\r\n    const onAllDevelopers = () => {\r\n        dispatch(requestUsers(1, pageSize, {term: '', friend: null}))\r\n    }\r\n\r\n    return <Sider width={200} style={ {\r\n        padding: '50px 0',\r\n        overflow: 'auto',\r\n        height: '100vh',\r\n        position: 'fixed',\r\n        zIndex: 1\r\n    }}>\r\n        <Menu\r\n            theme=\"light\"\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={['1']}\r\n            defaultOpenKeys={['sub1']}\r\n        >\r\n                <Menu.Item className={s.item} key=\"1\" icon={<UserOutlined />}><Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                <Menu.Item className={s.item} key=\"2\" icon={<MessageOutlined />}><Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n            <SubMenu className={s.item} key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\r\n                <Menu.Item className={s.item} key=\"5\"><Link onClick={onAllDevelopers} to=\"/developers\">All developers</Link></Menu.Item>\r\n                <Menu.Item className={s.item} key=\"6\"><Link onClick={onOnlyFriends} to=\"/developers\">Only followed</Link></Menu.Item>\r\n            </SubMenu>\r\n        </Menu>\r\n    </Sider>\r\n\r\n    // <nav className={s.nav}>\r\n    //     <div className={s.item}>\r\n    //         <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n    //     </div>\r\n    //     <div className={s.item}>\r\n    //         <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n    //     </div>\r\n    //     <div className={s.item}>\r\n    //         <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n    //     </div>\r\n    //     <div className={s.item}>\r\n    //         <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n    //     </div>\r\n    //     <div className={s.item}>\r\n    //         <NavLink to=\"settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n    //     </div>\r\n    // </nav>\r\n}\r\n\r\nexport default Navbar","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {Input} from 'antd'\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n        return (\r\n            <div>{props.isOwner &&\r\n            !editMode &&\r\n                <div className={s.ownerStatusBody} onClick={activateEditMode}><span>{props.status || \"Set status\"}</span></div>}\r\n            {editMode &&\r\n                <div>\r\n            {/*<input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}*/}\r\n            {/*       value={status} />*/}\r\n                <Input onChange={onStatusChange}\r\n                onPressEnter={deactivateEditMode}\r\n                onBlur={deactivateEditMode}\r\n                value={status}\r\n                placeholder=\"What's new?\"\r\n                autoFocus={true}/>\r\n                </div>\r\n            }\r\n                {\r\n                    !props.isOwner && <div><span>{props.status || \"Set status\"}</span></div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport * as yup from \"yup\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\"\r\nimport s from './ProfileInfo.module.css'\r\nimport {ContactsType, GetStringKeys, ProfileType} from \"../../../types/types\"\r\nimport {UseFormRegister} from \"react-hook-form/dist/types/form\"\r\nimport {Button, Input, Form, Checkbox, Divider, Typography} from \"antd\";\r\nimport {FilterType} from \"../../../redux/users-reducer\";\r\n\r\nconst {Text} = Typography;\r\n\r\n// type InputPropsType = {\r\n//     type: string\r\n//     label: string\r\n//     name: ProfileDataFormValuesTypeKeys\r\n//     register: UseFormRegister<ProfileType>\r\n// }\r\n\r\ntype ProfileDataFormValuesTypeKeys = GetStringKeys<ProfileType>\r\n\r\n// const Input: React.FC<InputPropsType> = ({type, label, name, register}) => (\r\n//     <>\r\n//         <label>{label}</label>\r\n//         <input type={type} {...register(name)} />\r\n//     </>\r\n// )\r\n\r\n// const schema = yup.object().shape({\r\n//     about: yup.string(),\r\n//     lookingForAJob: yup.boolean(),\r\n//     lookingForAJobDescription: yup.string()\r\n// });\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    deActivateEditMode: () => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\n// const ProfileDataForm: React.FC<ProfileDataFormPropsType> = ({profile, deActivateEditMode, saveProfile}) => {\r\n//\r\n//     const {register, handleSubmit, formState: {errors}} = useForm<ProfileType>(\r\n//         {\r\n//             mode: \"onBlur\",\r\n//             defaultValues: {\r\n//                 fullName: profile.fullName,\r\n//                 aboutMe: profile.aboutMe,\r\n//                 lookingForAJob: profile.lookingForAJob,\r\n//                 lookingForAJobDescription: profile.lookingForAJobDescription,\r\n//                 contacts: {\r\n//                     facebook: profile.contacts.facebook,\r\n//                     website: profile.contacts.website,\r\n//                     vk: profile.contacts.vk,\r\n//                     twitter: profile.contacts.twitter,\r\n//                     instagram: profile.contacts.instagram,\r\n//                     youtube: profile.contacts.youtube,\r\n//                     github: profile.contacts.github,\r\n//                     mainLink: profile.contacts.mainLink,\r\n//                 }\r\n//             },\r\n//             resolver: yupResolver(schema)\r\n//         })\r\n//\r\n//     const onSubmit: SubmitHandler<ProfileType> = (data: ProfileType) => {\r\n//         saveProfile(data)\r\n//         deActivateEditMode()\r\n//     }\r\n//\r\n//     return <form onSubmit={handleSubmit(onSubmit)}>\r\n//         <div>\r\n//             <input type=\"submit\" value=\"Save\"/>\r\n//         </div>\r\n//         <Input type=\"text\" label=\"Full name:\" name=\"fullName\" register={register}/>\r\n//         <Input type=\"text\" label=\"About me:\" name=\"aboutMe\" register={register}/>\r\n//         <div>Looking for a job:\r\n//             <input type={\"checkbox\"} id={\"lookingForAJob\"} {...register(\"lookingForAJob\")}/>\r\n//         </div>\r\n//         <div>\r\n//             <span>My professional skills:</span>\r\n//             <br/>\r\n//             <textarea placeholder='Enter your skills' cols={30} rows={10}\r\n//                       {...register(\"lookingForAJobDescription\")} />\r\n//         </div>\r\n//         <div>Contacts: {Object.keys(profile.contacts).map(key => {\r\n//             if (key === \"vk\" || \"github\" || \"facebook\" || \"instagram\" || \"twitter\" || \"website\" || \"youtube\" || \"mainLink\") {\r\n//                 // @ts-ignore\r\n//                 const name: ProfileDataFormValuesTypeKeys = \"contacts.\" + key\r\n//                 // @ts-ignore\r\n//                 return <div key={key} className={s.contact}>\r\n//                     {/*<label>{key + \": \"}</label>*/}\r\n//                     {/*<input type={\"text\"} {...register(name)} />*/}\r\n//                     <Input type=\"text\" label={key + \": \"} name={name} register={register}/>\r\n//                 </div>\r\n//             }\r\n//         })}</div>\r\n//     </form>\r\n// }\r\n\r\n\r\nconst ProfileDataForm2: React.FC<ProfileDataFormPropsType> = ({profile, deActivateEditMode, saveProfile}) => {\r\n\r\n    // const {register, handleSubmit, formState: {errors}} = useForm<ProfileType>(\r\n    //     {\r\n    //         mode: \"onBlur\",\r\n    //         defaultValues: {\r\n    //             fullName: profile.fullName,\r\n    //             aboutMe: profile.aboutMe,\r\n    //             lookingForAJob: profile.lookingForAJob,\r\n    //             lookingForAJobDescription: profile.lookingForAJobDescription,\r\n    //             contacts: {\r\n    //                 facebook: profile.contacts.facebook,\r\n    //                 website: profile.contacts.website,\r\n    //                 vk: profile.contacts.vk,\r\n    //                 twitter: profile.contacts.twitter,\r\n    //                 instagram: profile.contacts.instagram,\r\n    //                 youtube: profile.contacts.youtube,\r\n    //                 github: profile.contacts.github,\r\n    //                 mainLink: profile.contacts.mainLink,\r\n    //             }\r\n    //         },\r\n    //         resolver: yupResolver(schema)\r\n    //     })\r\n\r\n    // const onSubmit: SubmitHandler<ProfileType> = (data: ProfileType) => {\r\n    //     saveProfile(data)\r\n    //     deActivateEditMode()\r\n    // }\r\n\r\n    const onFinish = (values: any) => {\r\n        const {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, facebook, website, vk, twitter, instagram, youtube, github, mainLink} = values\r\n        values = {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts: {facebook, website, vk, twitter, instagram, youtube, github, mainLink}}\r\n        // @ts-ignore\r\n        saveProfile(values)\r\n        deActivateEditMode()\r\n        // @ts-ignore\r\n        console.log('Received values of form: ', {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts: {facebook, website, vk, twitter, instagram, youtube, github, mainLink}})\r\n    }\r\n\r\n    return <Form\r\n        size={'small'}\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        style={{width: '100%'}}\r\n        initialValues={{\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            lookingForAJob:profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n\r\n                facebook: profile.contacts.facebook,\r\n                website: profile.contacts.website,\r\n                vk: profile.contacts.vk,\r\n                twitter: profile.contacts.twitter,\r\n                instagram: profile.contacts.instagram,\r\n                youtube: profile.contacts.youtube,\r\n                github: profile.contacts.github,\r\n                mainLink: profile.contacts.mainLink,\r\n\r\n        }}\r\n    >\r\n        <Divider />\r\n        <Form.Item className={s.profileFormInput} label=\"Full name:\" >\r\n            <Form.Item name=\"fullName\" noStyle>\r\n            <Input />\r\n            </Form.Item>\r\n        </Form.Item>\r\n        <Form.Item className={s.profileFormInput} label=\"About me:\" >\r\n            <Form.Item name=\"aboutMe\" noStyle>\r\n                <Input />\r\n            </Form.Item>\r\n        </Form.Item>\r\n        <Form.Item className={s.profileFormInput} label=\"Looking for a job: \" name=\"lookingForAJob\" valuePropName=\"checked\" wrapperCol={{ span: 24 }}>\r\n            <Checkbox></Checkbox>\r\n        </Form.Item>\r\n        <span>My professional skills:</span>\r\n        <Form.Item className={s.profileFormInput} name=\"lookingForAJobDescription\" >\r\n            <Input.TextArea placeholder='Enter your skills'/>\r\n        </Form.Item>\r\n        <div>Contacts: {Object.keys(profile.contacts).map(key => {\r\n            if (key === \"vk\" || \"github\" || \"facebook\" || \"instagram\" || \"twitter\" || \"website\" || \"youtube\" || \"mainLink\") {\r\n                // @ts-ignore\r\n                const name: ProfileDataFormValuesTypeKeys = \"contacts.\" + key\r\n                // @ts-ignore\r\n                return <div key={key} className={s.contact}>\r\n                    <Form.Item className={s.profileFormInput} label={key + \": \"} >\r\n                        <Form.Item name={key} noStyle>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Form.Item>\r\n                </div>\r\n            }\r\n        })}</div>\r\n        <Form.Item >\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Save\r\n            </Button>\r\n        </Form.Item>\r\n    </Form>\r\n\r\n\r\n}\r\n\r\n\r\nexport default ProfileDataForm2","import {AppStateType} from \"./redux-store\"\r\n\r\nexport  const getProfileSelector = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n\r\n}\r\n\r\nexport  const getIsFetchingProfile = (state: AppStateType) => {\r\n    return state.profilePage.isFetchingProfile\r\n}\r\nexport  const getIsFetchingFollowed = (state: AppStateType) => {\r\n    return state.profilePage.isFetchingFollowed\r\n}\r\n\r\nexport  const getIsFollowed = (state: AppStateType) => {\r\n    return state.profilePage.isFollowed\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actions, getIsUserFollowed} from \"../../redux/profile-reducer\";\r\nimport {Button} from \"antd\";\r\nimport s from \"./Users.module.css\";\r\nimport {updateTotalUsersCount} from \"../../redux/users-reducer\";\r\n\r\ntype FollowUnfollowBtnProps = {\r\n    actualIsFollowed: boolean | null\r\n    userId: number\r\n    followingInProgress: Array<number> // array of users ids\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    setActualIsFollowed: (actualIsFollowed: boolean | null) => void\r\n}\r\n\r\n\r\nexport const FollowUnfollowBtn: React.FC<FollowUnfollowBtnProps> = ({actualIsFollowed, userId, followingInProgress, unfollow, follow, setActualIsFollowed}) => {\r\n\r\n\r\n    return <div>\r\n        {actualIsFollowed\r\n            ? <Button className={s.profileButton} disabled={followingInProgress.some(id => id === userId)}\r\n                      onClick={() => {\r\n                          unfollow(userId)\r\n                          // setActualIsFollowed(false)\r\n                      }}>Unfollow</Button>\r\n            : <Button className={s.profileButton} type=\"primary\" disabled={followingInProgress.some(id => id === userId)}\r\n                      onClick={() => {\r\n                          follow(userId)\r\n                          // setActualIsFollowed(true)\r\n                      }}>Follow</Button>}\r\n    </div>\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assets/img/user.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport {Row, Col, Divider, Typography, Space} from \"antd\";\r\nimport {follow, unfollow, updateTotalUsersCount} from \"../../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress} from \"../../../redux/users-selectors\";\r\nimport {getIsFollowed} from \"../../../redux/profile-selectors\";\r\nimport {FollowUnfollowBtn} from \"../../Users/FollowUnfollowBtn\";\r\nimport {actions, getIsUserFollowed} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst { Text, Link } = Typography;\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile,\r\n                                                         status,\r\n                                                         updateUserStatus,\r\n                                                         isOwner,\r\n                                                         savePhoto,\r\n                                                         saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const isFollowed = useSelector(getIsFollowed)\r\n\r\n\r\n\r\n\r\n    const [actualIsFollowed, setActualIsFollowed] = useState(isFollowed)\r\n\r\n    useEffect(() => {\r\n        // dispatch(updateTotalUsersCount(isFollowed))\r\n        setActualIsFollowed(isFollowed)\r\n    }, [isFollowed])\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(actions.setIsFollowed(actualIsFollowed))\r\n    //\r\n    //     console.log(actualIsFollowed)\r\n    // },[actualIsFollowed, isFollowed])\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }    \r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const followFunc = (userId: number) => {\r\n        dispatch(follow(userId, true))\r\n        // dispatch(getIsUserFollowed(userId))\r\n    }\r\n    const unfollowFunc = (userId: number) => {\r\n        dispatch(unfollow(userId, false))\r\n        // dispatch(getIsUserFollowed(userId))\r\n    }\r\n\r\n    return <div className={s.infoBlock}>\r\n            <Row style={{maxWidth: 200}}>\r\n                <div className={s.mainPhoto}>\r\n                    <img src={profile.photos.large != null ? profile.photos.large : userPhoto} alt=\"avatar\" />\r\n                    {isOwner && <label className={s.loadPhotoActive}><h3>Загрузить фото</h3>\r\n                        <input className={s.file} id=\"file\" type=\"file\" onChange={onMainPhotoSelected}/></label>}\r\n                </div>\r\n                <div>\r\n                    {!isOwner && <FollowUnfollowBtn actualIsFollowed={isFollowed} userId={profile.userId} follow={followFunc}\r\n                                                    unfollow={unfollowFunc} followingInProgress={followingInProgress} setActualIsFollowed={setActualIsFollowed}/>}\r\n                </div>\r\n            </Row>\r\n            <div className={s.descriptionBlock} >\r\n                <h2>{profile.fullName}</h2>\r\n                <ProfileStatusWithHooks status={status}\r\n                                        isOwner={isOwner}\r\n                                        updateUserStatus={updateUserStatus}/>\r\n\r\n                {editMode ? <ProfileDataForm profile={profile}\r\n                                             saveProfile={saveProfile}\r\n                                             deActivateEditMode={() => {setEditMode(false)}}/>\r\n                    : <ProfileData profile={profile}\r\n                                   isOwner={isOwner}\r\n                                   activateEditMode={() => {setEditMode(true)}}/>}\r\n            </div>\r\n    </div>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle:string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <Link className={s.contact} href={contactValue} target=\"_blank\">\r\n        {contactTitle}\r\n    </Link>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, activateEditMode}) => {\r\n\r\n\r\n    return <div>\r\n        {isOwner ? <div>\r\n            <Divider orientation=\"right\"><Text className={s.deviderText} onClick={activateEditMode}>Edit profile</Text></Divider>\r\n        </div>\r\n        : <Divider />\r\n        }\r\n        <Space direction=\"vertical\">\r\n        <Text><b>About me:</b> {profile.aboutMe}</Text>\r\n        <Text><b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}</Text>\r\n        {profile.lookingForAJob &&\r\n        <Text><b>My professional skills:</b> {profile.lookingForAJobDescription}</Text>}\r\n        <div style={{maxWidth: 450}}>\r\n            <Space direction=\"vertical\">\r\n            <b>Contacts:</b> <Space wrap split={<Divider type=\"vertical\" />}>\r\n            {Object.keys(profile.contacts).map(key => {\r\n                const contactValue = profile.contacts[key as keyof ContactsType]\r\n                if (contactValue) {\r\n                    return <Contact key={key} contactTitle={key} contactValue={contactValue}/>\r\n                }\r\n            })}\r\n            </Space>\r\n            </Space>\r\n            </div>\r\n        </Space>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css';\r\nimport userPhoto from \"../../../../assets/img/user.png\";\r\nimport {Button, Col, Divider, Row, Typography} from \"antd\";\r\nimport {LikeOutlined, LikeFilled, CloseOutlined} from \"@ant-design/icons\";\r\n\r\nconst {Text} = Typography\r\n\r\ntype PropsType = {\r\n    setLiked: (postId: number) => void\r\n    setUnLiked: (postId: number) => void\r\n    deletePost: (postId: number) => void\r\n    message: string\r\n    likesCount: number\r\n    isLiked: boolean\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return <div>\r\n        <Row className={s.item}>\r\n            <Col flex=\"60px\">\r\n                <img src={userPhoto} alt=\"\"/>\r\n            </Col>\r\n            <Col flex=\"310px\">\r\n                <div className={s.messageText}>\r\n                    <Text>{props.message}</Text>\r\n                </div>\r\n                <div>\r\n                    {props.isLiked ? <Button size=\"small\" shape=\"round\" icon={<LikeFilled className={s.likeUnlikeIcon}/>} onClick={() => props.setUnLiked(props.id)}>\r\n                            <span className={s.likesCount}>{props.likesCount}</span></Button>\r\n                    : <Button size=\"small\" shape=\"round\" icon={<LikeOutlined className={s.likeUnlikeIcon}/>} onClick={() => props.setLiked(props.id)}>\r\n                            <span className={s.likesCount}>{props.likesCount}</span></Button>}\r\n                </div>\r\n            </Col>\r\n            <Col>\r\n                <CloseOutlined className={s.removeIcon} onClick={() => props.deletePost(props.id)}/>\r\n            </Col>\r\n        </Row>\r\n        <Divider/>\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Post;","import React from \"react\"\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {PostType} from \"../../../types/types\";\r\nimport {Button, Divider, Form, Input} from \"antd\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    setLiked: (postId: number) => void\r\n    setUnLiked: (postId: number) => void\r\n    deletePost: (postId: number) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    const onSetLiked = (id: number) => {\r\n        props.setLiked(id)\r\n    }\r\n    const onSetUnLiked = (id: number) => {\r\n        props.setUnLiked(id)\r\n    }\r\n    const onDeletePost = (id: number) => {\r\n        props.deletePost(id)\r\n    }\r\n    let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post deletePost={onDeletePost} setLiked={onSetLiked} setUnLiked={onSetUnLiked} message={p.message} likesCount={p.likesCount} isLiked={p.isLiked} id={p.id} key={p.id}/>)\r\n\r\n    return <div className={s.postBlock}>\r\n        <Divider />\r\n        <h3>My posts</h3>\r\n        <MyPostsForm addPost={props.addPost}/>\r\n        <Divider/>\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype MyPostFormPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\ntype AddPostValuesType = {\r\n    newPostText: string\r\n}\r\nconst MyPostsForm: React.FC<MyPostFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const onAddPost = (values: AddPostValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    const onFinish = (values: {newPostText: string}) => {\r\n        onAddPost(values)\r\n        form.resetFields()\r\n    }\r\n    return <Form\r\n        form={form}\r\n        size={'middle'}\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        style={{width: '100%'}}\r\n        initialValues={{\r\n            newPostText: ''\r\n        }}\r\n    >\r\n        <Form.Item name='newPostText' >\r\n            <Input.TextArea allowClear={true} autoSize={{ minRows: 3, maxRows: 6 }} showCount maxLength={300} placeholder='Enter your message'/>\r\n        </Form.Item>\r\n        <Form.Item >\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Send\r\n            </Button>\r\n        </Form.Item>\r\n    </Form>\r\n}\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps, {addPost: actions.addPostAC, setLiked: actions.setLiked, setUnLiked: actions.setUnLiked, deletePost: actions.deletePostAC})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useEffect, useState} from \"react\"\r\nimport User from \"./User\"\r\nimport {actions, FilterType, follow, requestUsers, unfollow} from \"../../redux/users-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\"\r\nimport {NavLink, useHistory} from \"react-router-dom\"\r\nimport * as queryString from \"querystring\"\r\nimport {Avatar, Button, Col, Divider, Form, Input, Pagination, Row, Tooltip, Space, Typography} from 'antd'\r\nimport s from \"./Users.module.css\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\n\r\nconst { Text, Link } = Typography;\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string }\r\nexport const FollowedUsersBar: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = 1\r\n    const pageSize = 8\r\n\r\n    const filter: FilterType = {\r\n        term: '',\r\n        friend: true\r\n    }\r\n\r\n    const [actualTotalUsersCount, setActualTotalUsersCount] = useState(totalUsersCount)\r\n\r\n    useEffect(() => {\r\n        dispatch(requestUsers(currentPage, pageSize, filter))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        setActualTotalUsersCount(totalUsersCount)\r\n        dispatch(requestUsers(currentPage, pageSize, filter))\r\n    }, [totalUsersCount])\r\n\r\n\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    // const [actualPage, setActualPage] = useState(currentPage)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    // const onPageChanged = (pageNumber: number) => {\r\n    //     console.log('Page: ', pageNumber)\r\n    //     setActualPage(pageNumber)\r\n    //     dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    // }\r\n    // const onFilterChanged = (filter: FilterType) => {\r\n    //     dispatch(requestUsers(1, pageSize, filter))\r\n    // }\r\n    // const followFunc = (userId: number) => {\r\n    //     dispatch(follow(userId, true))\r\n    // }\r\n    // const unfollowFunc = (userId: number) => {\r\n    //     dispatch(unfollow(userId, true))\r\n    // }\r\n    // const onShowSizeChange = (currentPage: number = 1, pageSize: number) => {\r\n    //     console.log(currentPage, pageSize)\r\n    //     dispatch(actions.setPageSize(pageSize))\r\n    //     dispatch(actions.setCurrentPage(currentPage))\r\n    //     dispatch(requestUsers(currentPage, pageSize, filter))\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {/*<>*/}\r\n            {/*    <Pagination*/}\r\n            {/*        onChange={onPageChanged}*/}\r\n            {/*        showSizeChanger*/}\r\n            {/*        onShowSizeChange={onShowSizeChange}*/}\r\n            {/*        defaultCurrent={currentPage}*/}\r\n            {/*        current={currentPage}*/}\r\n            {/*        total={totalUsersCount}*/}\r\n            {/*        pageSize={pageSize}*/}\r\n            {/*    />*/}\r\n            {/*    <br />*/}\r\n            {/*</>*/}\r\n\r\n            <div className={s.followedBar}>\r\n                <NavLink to={'/developers?friend=true'}>\r\n                    <h4 className={s.moreBtn}>Your followed users:</h4>\r\n                </NavLink>\r\n                <Row justify=\"space-around\">\r\n                    {users.map(u => <div key={u.id} className={s.userItem}>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <Col span={24}>\r\n                                    <Tooltip title={u.name}>\r\n                                        <Avatar shape=\"square\" size={80} icon={u.photos.small ? <img src={u.photos.small} alt=\"avatar\"\r\n                                        /> : <UserOutlined />} />\r\n                                        <h4 className={s.userName}>\r\n                                            {u.name}\r\n                                        </h4>\r\n                                    </Tooltip>\r\n                                </Col>\r\n                            </NavLink>\r\n\r\n                        </div>\r\n                    )}\r\n                </Row>\r\n                <NavLink to={'/developers?friend=true'}>\r\n                <h4 className={s.moreBtn}>More...</h4>\r\n                </NavLink>\r\n            </div>\r\n\r\n            {/*<>*/}\r\n            {/*    <Pagination*/}\r\n            {/*        onChange={onPageChanged}*/}\r\n            {/*        showSizeChanger*/}\r\n            {/*        onShowSizeChange={onShowSizeChange}*/}\r\n            {/*        defaultCurrent={currentPage}*/}\r\n            {/*        current={currentPage}*/}\r\n            {/*        total={totalUsersCount}*/}\r\n            {/*        pageSize={pageSize}*/}\r\n            {/*    />*/}\r\n            {/*    <br />*/}\r\n            {/*</>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport { Row, Col } from \"antd\";\r\nimport {FollowedUsersBar} from \"../Users/FollowedUsersBar\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    saveProfile: (profile: ProfileType) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    // if (!props.isAuth) {\r\n    //     return <Redirect to={\"/login\"}/>\r\n    // }\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateUserStatus={props.updateUserStatus}/>\r\n            <Row>\r\n                <Col flex=\"200px\">\r\n                    <FollowedUsersBar />\r\n                </Col>\r\n                <Col span={16}>\r\n                    <MyPostsContainer />\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\"\r\nimport Profile from \"./Profile\"\r\nimport {connect} from \"react-redux\"\r\nimport {\r\n    actions,\r\n    fetchingProfile,\r\n    getProfile,\r\n    getUserStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatus,\r\n    getIsUserFollowed, fetchingFollowed\r\n} from \"../../redux/profile-reducer\"\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {compose} from \"redux\"\r\nimport {getIsAuth} from \"../../redux/auth-selectors\"\r\nimport {ProfileType} from \"../../types/types\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\nimport Preloader from \"../common/Preloader/Preloader\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {Col, Row} from \"antd\"\r\nimport {getIsFetchingFollowed, getIsFetchingProfile, getProfileSelector} from \"../../redux/profile-selectors\";\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    isFetchingProfile: boolean\r\n    isFetchingFollowed: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    fetchingProfile: () => void\r\n    getIsUserFollowed: (userId: number) => void\r\n    fetchingFollowed: () => void\r\n}\r\n\r\ntype OwnPropsType = {} // coming from outside\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (userId) {\r\n            this.props.fetchingProfile()\r\n            this.props.fetchingFollowed()\r\n            this.props.getProfile(userId)\r\n            this.props.getIsUserFollowed(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: AppStateType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.profile) {\r\n            return <Preloader/>\r\n        } else if (this.props.isFetchingProfile) {\r\n            return <Preloader/>\r\n        } else if (this.props.isFetchingFollowed) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <Row>\r\n                <Col flex={'100%'}>\r\n                    <Profile {...this.props}\r\n                             isOwner={!this.props.match.params.userId}\r\n                             profile={this.props.profile}\r\n                             status={this.props.status}\r\n                             updateUserStatus={this.props.updateUserStatus}\r\n                             savePhoto={this.props.savePhoto}\r\n                             isAuth={this.props.isAuth}\r\n                             saveProfile={this.props.saveProfile}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nlet mapStateToProps = (state:AppStateType): MapStatePropsType => ({\r\n    profile: getProfileSelector(state),\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: getIsAuth(state),\r\n    isFetchingProfile: getIsFetchingProfile(state),\r\n    isFetchingFollowed: getIsFetchingFollowed(state)\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {getProfile,\r\n        getUserStatus, updateUserStatus, savePhoto, saveProfile, fetchingProfile, fetchingFollowed, getIsUserFollowed}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {InferActionsTypes} from \"./redux-store\"\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch: any) => {\r\n        let promise = dispatch(getAuthUserData())\r\n        promise.then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default appReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport dialogsReducer from \"./dialogs-reducer\"\r\nimport usersReducer from \"./users-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./app-reducer\"\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer // (globalState: AppStateType) = > AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\nexport default store","import React from \"react\"\r\nimport Preloader from \"../components/common/Preloader/Preloader\"\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n            return <React.Suspense fallback={<Preloader />}>\r\n                <WrappedComponent {...props} />\r\n            </React.Suspense>\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/logo.eb15291a.png\";","import React from \"react\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {Button, Col, Layout, Row, Tooltip} from \"antd\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {getCurrentUserLogin, getIsAuth} from \"../../redux/auth-selectors\"\r\nimport {logout} from \"../../redux/auth-reducer\"\r\nimport s from \"./Header.module.css\"\r\nimport siteLogo from \"../../assets/img/logo.png\"\r\n\r\nexport type MapPropsType = {}\r\nexport type DispatchPropsType = {}\r\n\r\nexport const Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n    const {Header} = Layout\r\n    const isAuth = useSelector(getIsAuth)\r\n    const login = useSelector(getCurrentUserLogin)\r\n    const dispatch = useDispatch()\r\n    const logoutCallBack = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return <Header className=\"header\"  style={{ position: 'fixed', zIndex: 2, width: \"100%\" }}>\r\n        <div style={{maxWidth: 1000, margin: \"auto\"}}>\r\n            <Row justify=\"center\">\r\n                <Col span={16}>\r\n                    <NavLink to={'/profile'}>\r\n                        <img className={s.logo} src={siteLogo}/>\r\n                    </NavLink>\r\n                </Col>\r\n                {isAuth ? <>\r\n                        <Col span={4}>\r\n                            <Tooltip title=\"It`s you\">\r\n                            <NavLink to={'/profile'}>\r\n                                <h3>{login}</h3>\r\n                            </NavLink>\r\n                            </Tooltip>\r\n                        </Col>\r\n                        <Col className={s.loginBtn} span={4}>\r\n                            <Button type=\"primary\" onClick={logoutCallBack}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    <Col span={8}>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </div>\r\n    </Header>\r\n}\r\n","import React from \"react\"\r\nimport './App.less'\r\n// import 'antd/dist/antd.css'\r\nimport {BrowserRouter, Link, NavLink, Redirect, Route, Switch, withRouter} from \"react-router-dom\"\r\nimport Navbar from \"./components/Navbar/Navbar\"\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\"\r\n\r\nimport {connect, Provider} from \"react-redux\"\r\nimport {compose} from \"redux\"\r\nimport {initializeApp} from \"./redux/app-reducer\"\r\nimport Preloader from \"./components/common/Preloader/Preloader\"\r\nimport store, {AppStateType} from \"./redux/redux-store\"\r\nimport {withSuspense} from \"./hoc/withSuspense\"\r\nimport {Layout, Menu, Breadcrumb, Avatar, Row, Col} from 'antd'\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons'\r\n\r\nimport {Header} from \"./components/Header/Header\"\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst { SubMenu } = Menu\r\nconst {Content, Footer} = Layout\r\n\r\nconst News = React.lazy(() => import('./components/News/News'))\r\nconst Settings = React.lazy(() => import('./components/Settings/Settings'))\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst UsersPage = React.lazy(() => import('./components/Users/UsersContainer'))\r\nconst LoginPage = React.lazy(() => import('./components/Login/Login'))\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/Chat'))\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedUsers = withSuspense(UsersPage)\r\nconst SuspendedLoginPage = withSuspense(LoginPage)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        console.log(\"Some error occurred\")\r\n    }\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized)\r\n            return <Preloader />\r\n        return (\r\n            <Layout>\r\n                <Header/>\r\n                <Content>\r\n                    {/*<Breadcrumb style={{ margin: '16px 0' }}>*/}\r\n                    {/*    <Breadcrumb.Item>Home</Breadcrumb.Item>*/}\r\n                    {/*    <Breadcrumb.Item>List</Breadcrumb.Item>*/}\r\n                    {/*    <Breadcrumb.Item>App</Breadcrumb.Item>*/}\r\n                    {/*</Breadcrumb>*/}\r\n                    <Layout className=\"site-layout-background\" style={{maxWidth:1000, margin: \"auto\", padding: '24px 0' }}>\r\n\r\n                        <Row justify=\"center\">\r\n                            <Col>\r\n                                <Navbar />\r\n                            </Col>\r\n                            <Col>\r\n                                <Content style={{ padding: '50px 224px', height: 'auto' }}>\r\n                                    <Switch>\r\n                                        //         <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\r\n                                        //         <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                                        //         <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                                        //         <Route path='/developers' render={() => <SuspendedUsers/>}/>\r\n                                        //         <Route path='/news' render={withSuspense(News)}/>\r\n                                        //         <Route path='/settings' render={withSuspense(Settings)}/>\r\n                                        //         <Route path='/login' render={() => <SuspendedLoginPage/>}/>\r\n                                        //         <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\r\n                                        //         </Switch>\r\n                                </Content>\r\n                                <SuspendedChatPage/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>Social Network ©2022 Created by Vasiliy Kabanov</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\nconst SamuraiJSApp: React.FC = () => {\r\n    return(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer />\r\n            </Provider>\r\n        </BrowserRouter>)\r\n}\r\nexport default SamuraiJSApp","import reportWebVitals from './reportWebVitals'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport SamuraiJSApp from \"./App\"\n\n\nReactDOM.render(<SamuraiJSApp />, document.getElementById('root'))\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"3edfd82f-30a5-4078-930c-b8c2d645c5c8\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodesForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount:number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {PhotosType, ProfileType} from \"../types/types\"\r\nimport {instance, APIResponseType} from \"./api\"\r\n\r\ntype SavePhotoType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoType>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile/`, profile).then(res => res.data)\r\n    }\r\n}","import {PhotosType, PostType, ProfileType} from \"../types/types\"\r\nimport {profileAPI} from \"../api/profileAPI\"\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {usersAPI} from \"../api/usersAPI\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'First post', likesCount: 12, isLiked: false},\r\n        {id: 2, message: 'Hello world!', likesCount: 18, isLiked: true},\r\n        {id: 3, message: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. ', likesCount: 0, isLiked: false}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    isFetchingProfile: false,\r\n    isFetchingFollowed: false,\r\n    isFollowed: null as boolean | null\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST': {\r\n            let newPost = {\r\n                id: state.posts.length + 1,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n                isLiked: false\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'SN/PROFILE/SET_USER_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'SN/PROFILE/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS': {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        }\r\n        case 'SN/PROFILE/TOGGLE_IS_FETCHING_PROFILE': {\r\n            return {...state, isFetchingProfile: action.isFetchingProfile}\r\n        }\r\n        case 'SN/PROFILE/TOGGLE_IS_FETCHING_FOLLOWED': {\r\n            return {...state, isFetchingFollowed: action.isFetchingFollowed}\r\n        }\r\n        case 'SN/PROFILE/SET_IS_FOLLOWED': {\r\n            return {...state, isFollowed: action.isFollowed}\r\n        }\r\n        case 'SN/PROFILE/SET_LIKED': {\r\n            let changingPost = state.posts.find(p => p.id === action.postId)\r\n            let changingPostIndex = state.posts.findIndex(p => p.id === action.postId)\r\n            // @ts-ignore\r\n            let changedPost = {...changingPost, likesCount: changingPost.likesCount + 1, isLiked: true}\r\n            let postsCopy = state.posts.slice()\r\n            // @ts-ignore\r\n            postsCopy.splice(changingPostIndex, 1, changedPost)\r\n            return {...state,\r\n                posts: postsCopy}\r\n        }\r\n        case 'SN/PROFILE/SET_UNLIKED': {\r\n            let changingPost = state.posts.find(p => p.id === action.postId)\r\n            let changingPostIndex = state.posts.findIndex(p => p.id === action.postId)\r\n            // @ts-ignore\r\n            let changedPost = {...changingPost, likesCount: changingPost.likesCount - 1, isLiked: false}\r\n            let postsCopy = state.posts.slice()\r\n            // @ts-ignore\r\n            postsCopy.splice(changingPostIndex, 1, changedPost)\r\n            return {...state,\r\n                posts: postsCopy}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostAC: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    deletePostAC: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setUserStatus: (status: string) => ({type: 'SN/PROFILE/SET_USER_STATUS', status} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\r\n    toggleIsFetchingProfile: (isFetchingProfile: boolean) => ({type: 'SN/PROFILE/TOGGLE_IS_FETCHING_PROFILE', isFetchingProfile} as const),\r\n    toggleIsFetchingFollowed: (isFetchingFollowed: boolean) => ({type: 'SN/PROFILE/TOGGLE_IS_FETCHING_FOLLOWED', isFetchingFollowed} as const),\r\n    setIsFollowed: (isFollowed: boolean | null) => ({type: 'SN/PROFILE/SET_IS_FOLLOWED', isFollowed} as const),\r\n    setLiked: (postId: number) => ({type: 'SN/PROFILE/SET_LIKED', postId} as const),\r\n    setUnLiked: (postId: number) => ({type: 'SN/PROFILE/SET_UNLIKED', postId} as const)\r\n}\r\n\r\nexport const fetchingProfile = () => (dispatch: any) => {\r\n    dispatch(actions.toggleIsFetchingProfile(true))\r\n}\r\n\r\nexport const getProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n    dispatch(actions.toggleIsFetchingProfile(false))\r\n}\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setUserStatus(data))\r\n}\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setUserStatus(status))\r\n        }\r\n    } catch(error) {\r\n        //\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can`t be null\")\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchingFollowed = () => (dispatch: any) => {\r\n    dispatch(actions.toggleIsFetchingFollowed(true))\r\n}\r\n\r\nexport const getIsUserFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    const isFollowed = await usersAPI.getIsUserFollowed(userId)\r\n    // @ts-ignore\r\n    dispatch(actions.setIsFollowed(isFollowed))\r\n    dispatch(actions.toggleIsFetchingFollowed(false))\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoBlock\":\"ProfileInfo_infoBlock__STcf_\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__P8o7O\",\"mainPhoto\":\"ProfileInfo_mainPhoto__363op\",\"loadPhotoActive\":\"ProfileInfo_loadPhotoActive__26CPJ\",\"file\":\"ProfileInfo_file__2JG5j\",\"contact\":\"ProfileInfo_contact__nFnfh\",\"profileFormInput\":\"ProfileInfo_profileFormInput__1K4I8\",\"ownerStatusBody\":\"ProfileInfo_ownerStatusBody__16EfN\",\"deviderText\":\"ProfileInfo_deviderText__2Do_5\"};","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\"\r\nimport {UserType} from \"../types/types\"\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {Dispatch} from \"redux\"\r\nimport {usersAPI} from \"../api/usersAPI\"\r\nimport {APIResponseType} from \"../api/api\";\r\nimport {actions as profileActions} from \"./profile-reducer\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case \"SN/USERS/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case \"SN/USERS/SET_USERS\":\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case \"SN/USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state, totalUsersCount: action.count\r\n            }\r\n            case \"SN/USERS/SET_PAGE_SIZE\":\r\n            return {\r\n                ...state, pageSize: action.pageSize\r\n            }\r\n        case \"SN/USERS/TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case \"SN/USERS/SET_FILTER\":\r\n            return {...state, filter: action.payload.filter}\r\n        case \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const updateTotalUsersCount = (friend: null | boolean): ThunkType => async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let data = await usersAPI.getUsers(1, 10, '', friend)\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   friend: boolean | null,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n        let data = await usersAPI.getUsers(1, 10, '', friend)\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n        dispatch(profileActions.setIsFollowed(friend))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number, friend: boolean | null,): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, friend,  usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n}\r\n\r\nexport const unfollow = (userId: number, friend: boolean | null,): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, friend, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: {filter}} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\r\n    setPageSize: (pageSize: number) => ({type: 'SN/USERS/SET_PAGE_SIZE', pageSize: pageSize} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const),\r\n    setIsFollowed: (isFollowed: boolean | null) => ({type: 'SN/PROFILE/SET_IS_FOLLOWED', isFollowed} as const)\r\n}\r\n\r\nexport default usersReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","export default __webpack_public_path__ + \"static/media/Spin.0e441e73.svg\";","import preloader from \"../../../assets/img/Spin.svg\"\r\nimport React from \"react\"\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div style={ {backgroundColor: 'white'} }>\r\n        <img src={preloader} alt=\"preloader\"/></div>\r\n}\r\n\r\nexport default Preloader","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 100, term: string, friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`\r\n            + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    getIsUserFollowed(userId: number) {\r\n        return instance.get<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3kCri\",\"usersContent\":\"Users_usersContent__1lIqA\",\"item\":\"Users_item__3RpzA\",\"profileButton\":\"Users_profileButton__3f6ve\",\"usersButton\":\"Users_usersButton__2n_PE\",\"userName\":\"Users_userName__35Slj\",\"followedBar\":\"Users_followedBar__1VfnB\",\"moreBtn\":\"Users_moreBtn__3q2T9\",\"userItem\":\"Users_userItem__22HMg\"};","import {createSelector} from \"reselect\"\r\nimport {AppStateType} from \"./redux-store\"\r\n\r\nexport  const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n     return users.filter(u => true)\r\n})\r\n\r\n\r\nexport  const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport  const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport  const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport  const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport  const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport  const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1XRXb\",\"messageText\":\"Post_messageText__3ac6N\",\"likesCount\":\"Post_likesCount__54Xkc\",\"likeUnlikeIcon\":\"Post_likeUnlikeIcon__1Mw9h\",\"removeIcon\":\"Post_removeIcon__2NIXF\"};","import {instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptcha} from \"./api\"\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\ntype LoginResponseDataType = {\r\n        userId: number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptcha>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import {instance} from \"./api\"\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {ResultCodesEnum, ResultCodesForCaptcha} from \"../api/api\"\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {securityAPI} from \"../api/securityAPI\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    isWrongAuth: false,\r\n    authErrorMessage: null as string | null,\r\n    captchaUrl: null as string | null, // if null, then captcha is not required\r\n    currentUserProfile: null as ProfileType | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n        case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case 'SN/AUTH/WRONG_AUTH_DATA':\r\n            return {\r\n                ...state, isWrongAuth: action.isWrongAuth, authErrorMessage: action.message\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        {type: 'SN/AUTH/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        {type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\r\n    wrongAuthData: (isWrongAuth: boolean, message: string) => (\r\n        {type: 'SN/AUTH/WRONG_AUTH_DATA', isWrongAuth, message} as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | undefined): ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginData.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (loginData.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Authorisation error\"\r\n        dispatch(actions.wrongAuthData(true, message))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1Ro6q\",\"item\":\"Navbar_item__rxjX7\",\"activeLink\":\"Navbar_activeLink__tIA_r\"};","import {AppStateType} from \"./redux-store\";\r\n\r\nexport  const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\nexport  const getCurrentUserId = (state: AppStateType) => {\r\n    return state.auth.userId;\r\n}\r\n\r\nexport  const getIsWrongAuth = (state: AppStateType) => {\r\n    return state.auth.isWrongAuth;\r\n}\r\nexport  const getCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n}\r\n\r\nexport  const getAuthErrorMessage = (state: AppStateType) => {\r\n    return state.auth.authErrorMessage;\r\n}\r\n\r\nexport  const getCaptchaUrlSelector = (state: AppStateType) => {\r\n    return state.auth.captchaUrl;\r\n}\r\n\r\n"],"sourceRoot":""}