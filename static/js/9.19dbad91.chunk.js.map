{"version":3,"sources":["pages/Chat/Chat.module.css","pages/Chat/Chat.tsx"],"names":["module","exports","Chat","useState","isChatMinimized","setIsChatMinimized","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","className","s","openChatButton","title","type","onClick","size","icon","minimizeChatButton","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","messagesBlock","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","messageBlock","chatPhoto","span","to","userId","src","photo","userPhoto","chatMessage","userName","setMessage","sendMessageHandler","sendMessage","chatMessageForm","align","chatMessageFormInputs","maxLength","onPressEnter","onChange","value","disabled","withAuthRedirect"],"mappings":"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","file":"static/js/9.19dbad91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"openChatButton\":\"Chat_openChatButton__11ZJK\",\"chat\":\"Chat_chat__3RTFe\",\"minimizeChatButton\":\"Chat_minimizeChatButton__M3pyA\",\"messagesBlock\":\"Chat_messagesBlock__3ROW5\",\"messageBlock\":\"Chat_messageBlock__2DozN\",\"chatPhoto\":\"Chat_chatPhoto__IxbXd\",\"chatMessage\":\"Chat_chatMessage__36B8h\",\"chatMessageForm\":\"Chat_chatMessageForm__2hE4_\",\"chatMessageFormInputs\":\"Chat_chatMessageFormInputs__1O0Ov\"};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {CloseOutlined, WechatOutlined} from \"@ant-design/icons\";\r\nimport {Button, Col, Divider, Row, Tooltip} from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport userPhoto from \"../../assets/img/user.png\";\r\nimport s from \"./Chat.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n            <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const [isChatMinimized, setIsChatMinimized] = useState(true)\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page.</div>}\r\n        {isChatMinimized ? <div className={s.openChatButton} >\r\n                <Tooltip title=\"Chat\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        setIsChatMinimized(false)\r\n                    }} size={'large'} icon={<WechatOutlined />}>Chat\r\n                    </Button>\r\n                </Tooltip>\r\n            </div> :\r\n            <div className={s.chat}>\r\n                <div className={s.minimizeChatButton}>\r\n                    <Tooltip title=\"Minimize chat\">\r\n                        <Button type=\"primary\" onClick={() => {\r\n                            setIsChatMinimized(true)\r\n                        }} size={'small'} icon={<CloseOutlined />}>\r\n                        </Button>\r\n                    </Tooltip>\r\n                </div>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </div>}\r\n\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 150) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (isAutoScroll)\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [messages])\r\n    return <div className={s.messagesBlock} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n    return <div className={s.messageBlock}>\r\n    <Row>\r\n            <Col className={s.chatPhoto} span={5}>\r\n                <NavLink to={'/profile/' + message.userId}>\r\n                    <img src={message.photo ? message.photo : userPhoto}/>\r\n                </NavLink>\r\n            </Col>\r\n            <Col className={s.chatMessage} span={19}>\r\n                <b>{message.userName}</b>\r\n                <div>\r\n                    {message.message}\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC<{}> = ({}) => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return <div className={s.chatMessageForm}>\r\n    <Row  align=\"middle\">\r\n        <Col span={18}>\r\n            <TextArea className={s.chatMessageFormInputs} maxLength={100} onPressEnter={sendMessageHandler} onChange={(e) => setMessage(e.currentTarget.value)} value={message}></TextArea>\r\n        </Col>\r\n        <Col span={6}>\r\n            <Button className={s.chatMessageFormInputs} type=\"primary\" disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</Button>\r\n        </Col>\r\n        </Row>\r\n    </div>\r\n}\r\n\r\nexport default withAuthRedirect(ChatPage)"],"sourceRoot":""}